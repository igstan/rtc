head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2004.07.16.19.46.35;	author suan;	state Exp;
branches;
next	1.24;

1.24
date	2004.07.16.02.29.08;	author suan;	state Exp;
branches;
next	1.23;

1.23
date	2004.05.20.19.23.27;	author suan;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.17.22.34.44;	author suan;	state Exp;
branches;
next	1.21;

1.21
date	2004.05.02.18.26.36;	author suan;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.14.00.22.35;	author suan;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.07.21.07.14;	author suan;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.07.18.02.03;	author suan;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.07.17.38.56;	author suan;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.24.23.48.16;	author suan;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.24.19.29.20;	author suan;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.11.21.03.59;	author suan;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.11.19.18.20;	author suan;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.11.18.26.35;	author suan;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.13.00.23.51;	author suan;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.24.21.18.48;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.08.23.31.07;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.08.16.31.43;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.07.23.05.21;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.01.22.18.32;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.21.21.47.30;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.24.21.53.17;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.22.00.11.49;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.21.17.40.11;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.14.17.42.10;	author suan;	state Exp;
branches;
next	;


desc
@Header file for MBU stuff, split off from dfa.h
@


1.25
log
@CHANGES:
1. Moved PExprAssign::getSingletonLHSloc() to
   ExpDescr::getSingletonLoc(), so it can be used
   elsewhere to determine strong update.
1a. FIXED BUG (??) in getSingletonLoc(): previously
    for sdot object, was returning enclosing struct!?!
2. Added -vtfix flag, which enables/disables RED and
   MBU treatment of verifyTag as fixing the type on
   mismatch.
3. Added MBU handling of verifyTag vtfix.
4. Changed so that MBU uses the RED parallel hackery
   (PM_RED_UNSAFE) when vtfix is on.
@
text
@#ifndef TC_MBU_H /* { */
#define TC_MBU_H

#include "dfa.h"
#include "rda.h"
#include "flags.h"

//----------------------------------
//- MBU: may-be-uninit analysis

class MBUfact : public DFAfact
{
  //-- inherited interface
  public:
    friend class MBUfactHandler; //- to access aoset
    friend class pMBUfactHandler; //- to access aoset

    DFAfact& newClone(bool preserve = true);

    void setTop() { is_bot = false; aoset.Clear(); }
    void setBottom() { is_bot = true; aoset.Clear(); }
    bool meet(DFAfact& df, bool preserve = true, bool warnNotLE = false);
    void join(DFAfact& df, bool preserve = true);

    void debug_dump(FILE * outf, bool brief = true);

  //-- mbu-specific stuff
  public:
    MBUfact() : aoset(), is_bot(false) {}
    ~MBUfact() { aoset.Clear(); }

    void addRelevantAliasLocs(suco_set<AO *>& laoset);

    bool intersectsAliases(suco_set<AO *>& raoset);

    void insertComponentAOs(AO& ao);
    void removeComponentAOs(AO& ao);

    bool contains(AO& ao) { return aoset.Contains(&ao); }
    int length() { return aoset.Length(); }

  private:
    MBUfact(MBUfact& mf); //-- disable copy constructor

    //-- data --
    suco_set<AO *> aoset;
    bool is_bot; //- mark bottom

    //-- static helpers for addUnsafeAliasLocs
    static MBUfact * aual_fact;
    static bool add_locs_to_aual_fact(AO& ao);

    //-- static helpers for intersectsAliases
    static suco_set<ECR *> ia_ecrset;
    static bool is_ia_ecrset(ECR& ecr);
    static suco_set<ECR *> cfr_ecrset;
    static bool collectFnReturns(AO& ao);

    //-- static helper for [insert/remove]ComponentAOs()
    static MBUfact * nsao_mbf;
    static void collectNonStructAO(AO& ao);
    static void removeAO(AO& ao);
};

//----------------------------------
//- MBU: may-be-uninit analysis

class MBUfactHandler : public DFAfactHandler
{
  public:
    DFAfact& newTopFact() { return *new MBUfact(); }
    void deleteFact(DFAfact& df) { delete (MBUfact *) &df; }

    void filterCallsiteFacts(PExprCall& dc, DFAfact& df, DFAfact& df_local);

    DFAfact& lookupNodeFact(CFGnode& cn, CFGnode * tfSucc = 0);
    DFAfact& lookupNodeFact(PExprCall& dc);
    DFAfact& lookupNodeFact(PExprParallel& dp);

    virtual bool handleStrongAssign(DFAfact& df, AO& lhs, ExpDescr& rhs,
			    PgmExpr * dnode = 0, PgmStmt * cnode = 0, PExprArg * arg = 0);
    virtual bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, ExpDescr& rhs, PExprAssign& dnode);
    virtual bool handleFormal(DFAfact& df, PExprDecl& dd, CFGfunction& parfn, bool interproc);
    virtual bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, ExpDescr * retedesc, bool interproc);
    virtual bool handleDecl(DFAfact& df, PExprDecl& dd);
    virtual bool handleVerify(DFAfact& df, PExprVerify& dv);
    virtual bool handlePredicate(DFAfactPair& dfp, PExprPredicate& dp) { return true; } //- MBU: do nothing

    virtual void handleFreeCall(DFAfact& df, PExprCall& dc) {} //- MBU: do nothing

    virtual void intraProcInitializeEntryFact(DFAfact& df, CFGnode& cn);
    virtual void interProcFilterEntryFact(DFAfact& df, CFGnode& cn);
    virtual void intraProcHandleCall(DFAfact& df, PExprCall& dc);
    virtual void interProcHandleCallArgs(DFAfact& df, PExprCall& dc);
    virtual void interProcHandleRetvalAssign(DFAfact& df, PExprCall& dc);

  public:
    static MBUfactHandler handler;
};

class MBUc1factHandler : public MBUfactHandler
{
  public:
    bool handleVerify(DFAfact& df, PExprVerify& dv);

  public:
    MBUc1factHandler(RDAfact& res) : MBUfactHandler(), results(res) {}

  private:
    MBUc1factHandler();

    RDAfact& results;

    //-- helpers for handleVerify
    static MBUfact * cf_mf;
    static RDAfact * cf_res;
    static bool collectFact(AO& ao);

};

class MBUc2factHandler : public MBUfactHandler
{
  public:
    bool handleStrongAssign(DFAfact& df, AO& lhs, ExpDescr& rhs,
			    PgmExpr * dnode = 0, PgmStmt * cnode = 0, PExprArg * arg = 0);
    bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, ExpDescr& rhs, PExprAssign& dnode);
    bool handleFormal(DFAfact& df, PExprDecl& dd, CFGfunction& parfn, bool interproc);
    bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, ExpDescr * retedesc, bool interproc);
    bool handleDecl(DFAfact& df, PExprDecl& dd);
    // bool handleVerify(DFAfact& df, PExprVerify& dv); //- MBUc2: do nothing

  public:
    MBUc2factHandler(RDAfact& res) : MBUfactHandler(), results(res) {}

  private:
    MBUc2factHandler();

    RDAfact& results;
};

//----------------------------------
//- MBU: may-be-uninit analysis

class MBU : public DFA
{
  public:
    MBU(bool inter, DFAfactHandler& dfh = MBUfactHandler::handler)
	: DFA(dfh, inter, false, (flag_vtfix)?BBA::PM_RED_UNSAFE:BBA::PM_DEFAULT) {}

    bool isUselessNode(CFGnode& cn);
    bool isUselessNode(PgmExpr& dn);
    bool markUselessNode(CFGnode& cn);
    bool markUselessNode(PgmExpr& dn);

    bool absorbAndCompare(DFAfact& df1, DFAfact& df2, LocSet * backedge_filter = 0);

    void print_debug_stats(CFG& cfg, FILE * outf);
};

//----------------------------------
// MBUc: collect may-be-uninit results
// A. by rda/mbu - use RDMBfactHandler
// B. by mbu delta, use, in succession:
//    MBUc1factHandler - identify only MBU locations
//    MBUc2factHandler - for these locations, find deltas

class MBUc : public BBA
{
  public:
    MBUc(DFAfactHandler& dfh, bool inter) : BBA(dfh,inter,(flag_vtfix)?PM_RED_UNSAFE:PM_DEFAULT) {}

  private:
    MBUc();
};

//----------------------------------

#endif /* } ifndef TC_MBU_H */

@


1.24
log
@Fix 1: in -mbu[34], don't add formal to MBUfact.
Fix 2: when inserting/removing AO from MBUfact, if
       AO is a struct/union, then insert its component
       scalars (or remove all components).
       ~ but only if isLoc and not isMalloc.
@
text
@d6 1
d86 1
a86 1
    virtual bool handleVerify(DFAfact& df, PExprVerify& dv) { return true; } //- MBU: do nothing
d147 2
a148 1
    MBU(bool inter, DFAfactHandler& dfh = MBUfactHandler::handler) : DFA(dfh, inter) {}
d170 1
a170 1
    MBUc(DFAfactHandler& dfh, bool inter) : BBA(dfh,inter) {}
@


1.23
log
@Extracted pMBU into its own files: pmbu.c,pmbu.h.
@
text
@d35 3
d57 5
@


1.22
log
@Added pMBU: may-be-uninit analysis for ptr/ptrw mode.
Very conservative, and still slow...
@
text
@a131 25
class pMBUfactHandler : public MBUfactHandler
{
  public:
    bool handleStrongAssign(DFAfact& df, AO& lhs, ExpDescr& rhs,
			    PgmExpr * dnode = 0, PgmStmt * cnode = 0, PExprArg * arg = 0);
    bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, ExpDescr& rhs, PExprAssign& dnode);
    bool handleFormal(DFAfact& df, PExprDecl& dd, CFGfunction& parfn, bool interproc);
    bool handleDecl(DFAfact& df, PExprDecl& dd);
    bool handleVerify(DFAfact& df, PExprVerify& dv);
    void intraProcInitializeEntryFact(DFAfact& df, CFGnode& cn);
    void intraProcHandleCall(DFAfact& df, PExprCall& dc);

  public:
    pMBUfactHandler(suco_set<AO *>& res, bool rw) : MBUfactHandler(), results(res), readwrite(rw) {}

  private:
    pMBUfactHandler();

    void moveToResults(suco_set<AO *>& uninit_aos, ExpDescr& use_exp, bool deref);
    void moveToResults(suco_set<AO *>& uninit_aos, LocSet& use_locs);

    suco_set<AO *>& results;
    bool readwrite;
};

@


1.21
log
@MAJOR UPDATE:
- Created new class LocSet to encapsulate a set of
  locations, used to store GMOD, GREF, and backedge
  filters.
  (Previously, was suco_set<AO *>, later changed to
  suco_set<ECR *>.)
- Created two versions, one storing AOs, another
  storing ECRs.  Verified that results are the
  same, though performance is not (but only when
  computing backedge filters).
@
text
@d15 1
d31 1
a31 1
    void addUnsafeAliasLocs(suco_set<AO *>& laoset);
d132 25
d163 1
a163 1
    MBU(bool inter) : DFA(MBUfactHandler::handler, inter) {}
d185 1
a185 4
    MBUc(DFAfactHandler& dfh, RDAfact& res, bool inter) : BBA(dfh,inter), results(res) {}

  protected:
    RDAfact& results;
@


1.20
log
@Major overhaul, to handle function call filtering.
See dfa.cpp for documentation.
 - filterRetnodeFact() eliminated; replaced by
 - interProcHandleRetvalAssign -- responsible for
   assigning from R X I <fn> to R D I <fp>.
 - interProcPrepareReturnCollector() -- special
    pre-processor for indirect calls to set "intersection"
   AOs to "top".
 - meetFiltered() -- does meet, but constrained by a
   window (defined by a function's GREF/MayFree set).
Supporting changes:
 - eliminated removeArgIntervalsExceptFor(); rendered obsolete
   by
 - filterGrefMayFree() -- called at function entry
 - RANfact::isTop()
 - collectAOset, createTopMappings, in support of
   interProcPrepareReturnCollector()
 - PExprCall::isDirectCall() and isRecursiveCall()
 - CFGfunction::GrefOrFreeHeapAffects()
@
text
@a29 1
    void filterInto(suco_set<AO *>& filterset, MBUfact& ffact);
a30 1
    void addAOs(suco_set<AO *>& aos);
d144 1
a144 1
    bool absorbAndCompare(DFAfact& df1, DFAfact& df2, suco_set<AO *> * backedge_filter = 0);
@


1.19
log
@Added new DFA interface function interProcFilterEntryFact()
called at each function entry (when doing inter-proc
analysis).
@
text
@d87 1
@


1.18
log
@Changed handleFormal to pass parent-function rather
than previous "ismain" and "callsites" pair.
@
text
@d84 1
@


1.17
log
@Added interProcHandleCallArgs() interface function to
DFA and all derived classes.
@
text
@d75 1
a75 1
    virtual bool handleFormal(DFAfact& df, PExprDecl& dd, bool ismain, suco_llist<PExprCall *>& callsites, bool interproc);
d117 1
a117 1
    bool handleFormal(DFAfact& df, PExprDecl& dd, bool ismain, suco_llist<PExprCall *>& callsites, bool interproc);
@


1.16
log
@PREVIOUSLY: handleReturnStmt was only called for non-void
return statements.
NOW: handleReturnStmt is called for ALL return statements.
This is needed so analyses can properly handle deallocation
of local variables.
OTHER CHANGES:
 1. RAN: handleReturnStmt now removes intervals pointing
    to freedStack ECRs.
 2. Interval: changed code for narrow() to be more logically
    sound?
@
text
@d85 1
@


1.15
log
@Modified handleFormal to pass a flag indicating whether
the function is "main".  This is needed because main's
argc/argv formals may need to be initialized differently.

For RAN::handleFormal() - if ismain, then set bottom;
else do top MEET callsite facts.

For MBU::handleFormal() - *BUG FIX* - was previously calling
handleStrongAssign(), which was _wrong_ (doesn't correctly
meet facts from multiple callsites); fixed to do "weak"
assignment.
@
text
@d76 1
a76 1
    virtual bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, ExpDescr& retedesc, bool interproc);
d117 1
a117 1
    bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, ExpDescr& retedesc, bool interproc);
@


1.14
log
@Another change: RETURN argument is now an ExpDescr
instead of an aoset (as was before); with a corresponding
change to the argument of handleReturnStmt.

Independently: updated RAN's handleFormal (wrote but
not tested).
@
text
@d75 1
a75 1
    virtual bool handleFormal(DFAfact& df, PExprDecl& dd, suco_llist<PExprCall *>& callsites, bool interproc);
d116 1
a116 1
    bool handleFormal(DFAfact& df, PExprDecl& dd, suco_llist<PExprCall *>& callsites, bool interproc);
@


1.13
log
@Interface change: intraProcHandleCall now takes a PExprCall
rather than a CFGfunction -- consequently, the iteration
over target functions is now the responsibility of
intraProcHandleCall rather than in dfa.cpp: BBA::PgmExprPropagate.

Then, one update to body of MBU::intraProcHandleCall -
to account for assignment of return value, at callsite
dc to ao, now add "R D ao" to the MBUfact set, so that
the subsequent assignment of the call's return value
to a variable will mark that variable as MBU as well.
This was a bug in the old implemenation.
@
text
@d76 1
a76 1
    virtual bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, suco_set<AO *>& retaos, bool interproc);
d117 1
a117 1
    bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, suco_set<AO *>& retaos, bool interproc);
@


1.12
log
@Interface update: augmented handleFormal / handleReturnStmt
with "interproc" flag.
Not yet used.
@
text
@d84 1
a84 1
    virtual void intraProcHandleCall(DFAfact& df, CFGfunction& fn);
@


1.11
log
@Infrastructure update: CFGnode backedge indicator has
been upgraded from a boolean to an AO set pointer, for
which a value of:
  0 indicates non-backedge
  1 (constant CFGnode::ALL_AOS) indicates a backedge
    with no AO-filter information (i.e. widen all intervals)
  otherwise, contains the set of AOs that may be modified
    in the loop body, and constitutes a safe superset of
    AOs whose interval needs to be widened.
So far, added the necessary interface and skeletal function
bodies; NOT YET DONE: write the engine to compute the may-mod
sets.
@
text
@d75 2
a76 2
    virtual bool handleFormal(DFAfact& df, PExprDecl& dd, suco_llist<PExprCall *>& callsites);
    virtual bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, suco_set<AO *>& retaos);
d116 2
a117 2
    bool handleFormal(DFAfact& df, PExprDecl& dd, suco_llist<PExprCall *>& callsites);
    bool handleReturnStmt(DFAfact& df, PgmStmt& retnode, suco_set<AO *>& retaos);
@


1.10
log
@Restructured BBA/DFA definitions: added default definitions
of the seven BBA methods (isUseless,markUseless,checkProgress)
and removed them from the inheriting collector classes.
Altogether "cleaner" (?) interface, with no change in semantics.
@
text
@d143 1
a143 1
    bool absorbAndCompare(DFAfact& df1, DFAfact& df2, bool is_backedge = false);
@


1.9
log
@1. Added code (to CFG::assignId) to mark backedges in
   the CFG.
   May be buggy -- must test.
2. -MAJOR UPDATE-
   Added ran.cpp/ran.h for range checking.
   Thusfar, ran.cpp contains only empty skeletons to be
   filled in - do not run!
3. Renamed widen_narrow in CFG to is_backedge;
   also, now widen/narrow are specific to RAN/RANfact,
   rather than generic to DFA/DFAfact.
@
text
@a156 13
  public: //- inherited stuff

    //-- no nothing when collecting
    void checkCallProgress(PExprCall& dc, DFAfact& df) {}
    void checkNodeProgress(CFGnode& cn, DFAfactPair& dfp) {}
    bool checkParallelProgress(PExprParallel& dp, DFAfact& df, bool preserve = true) { return false; }

    //-- no node is useless when collecting
    bool isUselessNode(CFGnode& cn) { return false; }
    bool isUselessNode(PgmExpr& dn) { return false; }
    bool markUselessNode(CFGnode& cn) { return false; }
    bool markUselessNode(PgmExpr& dn) { return false; }

@


1.8
log
@Added infrastructure for widening/narrowing:
 - added widen/narrow flag to CFGnode and DFA
 - added widen/narrow flag to absorbAndCompare to
   trigger widening/narrowing
Also, extended lookupNodeFact to take an extra argument:
a CFGnode to guide lookup of branch successors.
@
text
@d143 1
a143 1
    bool absorbAndCompare(DFAfact& df1, DFAfact& df2, bool widen_narrow = false);
@


1.7
log
@Major Update: added handling of predicates and branches:
 - added DFAfactPair class
 - changed Pgm[Expr/Stmt]Propagate to work on DFAfactPairs (dfps)
 - checkNodeProgress also handles dfps properly
 - two new virtual functions in DFAfactHandler are
   - lookupNodeFactPair: default version outputs a warning
     and allocates a dfp (which probably won't be deleted)
   - handlePredicate: wrote default { return true; } versions
     in all the subclasses.
@
text
@d68 1
a68 1
    DFAfact& lookupNodeFact(CFGnode& cn);
d143 1
a143 1
    bool absorbAndCompare(DFAfact& df1, DFAfact& df2);
@


1.6
log
@Changed rhs argument of Assign node from an aolist to an exp-descr
triplet: <aolist, aff-aolist, estr>.
Main effect is changing the type of the rhs argument of
handle[Strong/Weak]Assign from an aoset to an ExpDescr,
which has been down-propagated to all subclasses.
@
text
@d79 1
d161 1
a161 1
    void checkNodeProgress(CFGnode& cn, DFAfact& df) {}
@


1.5
log
@Fixed "major" logical flaw when dealing with Parallel nodes:
previously, final fact was taken to be the *join* of the
facts along the different paths; however, that only works
for monotonic transfer functions (?), which gen-kill functions
aren't; therefore must take the *meet*.
(Note that when monotonic, the join result is more precise
than the meet).
@
text
@d72 1
a72 1
    virtual bool handleStrongAssign(DFAfact& df, AO& lhs, suco_set<AO *>& rhs,
d74 1
a74 1
    virtual bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, suco_set<AO *>& rhs, PExprAssign& dnode);
d112 1
a112 1
    bool handleStrongAssign(DFAfact& df, AO& lhs, suco_set<AO *>& rhs,
d114 1
a114 1
    bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, suco_set<AO *>& rhs, PExprAssign& dnode);
@


1.4
log
@Added handleFreeCall to dfa framework (PExprCall now has
extra set of undeclared functions to which it might point,
and a helper callsFree() to determine if it may call free()).
For mbu/rda/rdmb, handleFreeCall is a noop; for RED: wrote
handleFreeCall to remove expressions affected by *p (p is
arg 1 of free call).
@
text
@d161 1
a161 1
    bool checkParallelProgress(PExprParallel& dp, DFAfact& df) { return false; }
@


1.3
log
@Changed final argument to handleWeakAssign from PgmExpr
to PExprAssign!
@
text
@d80 2
@


1.2
log
@Updated redundant analysis: strong and weak assignments written;
to do: function calls and result collection.
Entailed following changes:
  PExprAssign::getLHS to return ExpDescr instead of AO set.
  DFA handleWeakAssign's second argument is now ExpDescr rather than AO set.
  ECR: added helper collectAliasECRs (not tested!)
@
text
@d74 1
a74 1
    virtual bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, suco_set<AO *>& rhs, PgmExpr& dnode);
d112 1
a112 1
    bool handleWeakAssign(DFAfact& df, ExpDescr& lhs, suco_set<AO *>& rhs, PgmExpr& dnode);
@


1.1
log
@Initial revision
@
text
@d74 1
a74 1
    virtual bool handleWeakAssign(DFAfact& df, suco_set<AO *>& lhs, suco_set<AO *>& rhs, PgmExpr& dnode);
d112 1
a112 1
    bool handleWeakAssign(DFAfact& df, suco_set<AO *>& lhs, suco_set<AO *>& rhs, PgmExpr& dnode);
@
