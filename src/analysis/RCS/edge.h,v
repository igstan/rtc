head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2004.05.07.14.52.47;	author suan;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.15.14.53.34;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.15.14.34.17;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.28.21.37.24;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.23.22.43.31;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.19.16.45.01;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.18.17.06.19;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.18.15.55.32;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.16.22.43.51;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.11.04.21.43;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.10.17.00.45;	author suan;	state Exp;
branches;
next	;


desc
@header for Edge and Edge List classes.
@


1.11
log
@Removed unnecessary declaration of class ECR.
@
text
@#ifndef TC_EDGE_H /* { */
#define TC_EDGE_H

#include <stdio.h>

class AO;
class TCtype;

//------------------------------------------------------

class TCassignEdge {
  public:
    friend class TCassignEdgeSet;
    TCassignEdge(AO& t, AO& f, TCtype& ty) : to(t), from(f), type(ty) {}
    
    AO& getTo() const { return to; }
    AO& getFrom() const { return from; }
    TCtype& getType() const { return type; }

    void debug_dump(FILE * os);

    static int compare(TCassignEdge * le, TCassignEdge * re); // used by AO/suco_set

  private:
    TCassignEdge();
    AO& to;
    AO& from;
    TCtype& type;
};

//------------------------------------------------------

#endif /* } ifdef TC_EDGE_H */
@


1.10
log
@Renamed TCassignEdge::edgeCompare to TCassignEdge::compare;
@
text
@a6 1
class ECR;
@


1.9
log
@ELIMINATED TCassignEdgeList, TCassignEdgeSet, and TCassignEdgeIterator;
replaced by SUCO equivalents;
entailed writing a new edge compare function.
@
text
@d16 1
d20 1
d23 1
a23 1
    static int edgeCompare(TCassignEdge * le, TCassignEdge * re); // used by AO/suco_set
@


1.8
log
@Incorporated new format that includes typed-assignments
(: <T> <O>) and verifyTag/verifyPtr (} <T> <O>, ] <O>).
@
text
@d21 2
a27 44
};

//------------------------------------------------------

class TCassignEdgeSet {
  public:
    friend class TCassignEdgeIterator;
    TCassignEdgeSet() : head(0) {}
    ~TCassignEdgeSet();
    TCassignEdge * insert(AO& to, AO& from, TCtype& ty); //- returns edge if new
    void debug_dump(FILE * os);

  protected:
    class node {
      public:
        node(TCassignEdge& e, node * n = 0) : edge(e), next(n) {}
        TCassignEdge& edge;
        node * next;
      private:
        node();
    };
    node * head;
};

class TCassignEdgeList : public TCassignEdgeSet {
  public:
    TCassignEdgeList() : TCassignEdgeSet(), tailptr(&head) {}
    void append(TCassignEdge& e);

  private:
    node ** tailptr;
};

class TCassignEdgeIterator {
  public:
    TCassignEdgeIterator(TCassignEdgeSet& l): set(l), nptr(l.head), initial(true) {}
    void reset() { nptr = set.head; initial = true;}
    bool iterate();
    TCassignEdge * current();
  private:
    TCassignEdgeIterator();
    TCassignEdgeSet& set;
    TCassignEdgeSet::node * nptr;
    bool initial;
@


1.7
log
@Added TCassignEdge.debug_dump.
@
text
@d8 1
d15 1
a15 1
    TCassignEdge(AO& t, AO& f) : to(t), from(f) {}
d18 1
d25 1
d35 1
a35 1
    TCassignEdge * insert(AO& to, AO& from); //- returns edge if new
@


1.6
log
@Removed TCedge and relatives: in graph, pointsTo and inclusion
edges are stored as lists of nodes, rather than an actual edge
objects (as in assignment edges).
@
text
@d17 2
@


1.5
log
@Added merge (set union) function.
@
text
@a10 62
class TCedge {
  public:
    friend class TCedgeSet;
    enum eKind { ePtsTo, eInclude };
    TCedge(ECR& t, ECR& f, eKind k) : to(t), from(f), kind(k) {}
    ECR& getTo() const { return to; }
    ECR& getFrom() const { return from; }
  private:
    TCedge();
    ECR& to;
    ECR& from;
    eKind kind;
};

//------------------------------------------------------

class TCedgeSet {
  public:
    friend class TCedgeIterator;
    TCedgeSet() : head(0) {}
    ~TCedgeSet();
    TCedge * insert(ECR& to, ECR& from, TCedge::eKind k); //- returns edge if new
    void insert_no_check(TCedge &edge);
    void debug_dump(FILE * os);
    void merge(TCedgeSet& eset); //- perform set union

  protected:
    class node {
      public:
        node(TCedge& e, node * n = 0) : edge(e), next(n) {}
        TCedge& edge;
        node * next;
      private:
        node();
    };
    node * head;
};
/*
class TCedgeList : public TCedgeSet {
  public:
    TCedgeList() : TCedgeSet(), tailptr(&head) {}
    void append(TCedge& e);

  private:
    node ** tailptr;
};
*/
class TCedgeIterator {
  public:
    TCedgeIterator(TCedgeSet& l): set(l), nptr(l.head), initial(true) {}
    void reset() { nptr = set.head; initial = true;}
    bool iterate();
    TCedge * current();
  private:
    TCedgeIterator();
    TCedgeSet& set;
    TCedgeSet::node * nptr;
    bool initial;
};

//------------------------------------------------------

@


1.4
log
@Added TCedge and TCedgeSet/Iterator
@
text
@d4 2
d35 1
@


1.3
log
@Added assignEdgeSet to AOs, and mechanism to insert into
the set without duplication.
Next: use this info to propagate UNSAFE from addr-taken
nodes.
@
text
@d5 1
d8 1
a8 1
/*
d22 1
a22 1
*/
d24 1
a24 1
/*
d30 2
a31 1
    TCedge * insert(ECR& to, ECR& from); //- returns edge if new
d45 1
a45 1

d54 1
a54 1

d67 1
a67 1
*/
@


1.2
log
@Added edge iterator.
@
text
@d4 1
a4 1
#include "ao.h"
d7 1
a7 1

d10 5
a14 5
    friend class TCedgeList;
    enum kind { eAssign, ePtsTo, eInclude }; //- not used now; use later
    TCedge(AO& t, AO& f) : to(t), from(f) {}
    AO& getTo() const { return to; }
    AO& getFrom() const { return from; }
d17 3
a19 2
    AO& to;
    AO& from;
d21 1
a21 1

d23 2
a24 2

class TCedgeList {
d27 3
a29 3
    TCedgeList() : head(0), tailptr(&head) {}
    ~TCedgeList();
    void insert(TCedge& e);
d32 1
a32 1
  private:
d42 8
d55 2
a56 2
    TCedgeIterator(TCedgeList& l): list(l), nptr(l.head), initial(true) {}
    void reset() { nptr = list.head; initial = true;}
d61 60
a120 2
    TCedgeList& list;
    TCedgeList::node * nptr;
@


1.1
log
@Initial revision
@
text
@d13 2
d25 1
d30 1
d42 13
@
