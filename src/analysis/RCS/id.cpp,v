head	1.14;
access;
symbols;
locks; strict;
comment	@// @;


1.14
date	2004.07.16.21.27.34;	author suan;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.28.22.20.13;	author suan;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.18.22.33.22;	author suan;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.18.17.42.41;	author suan;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.16.22.57.18;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.13.20.04.29;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.18.20.08.46;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.11.23.07.19;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.11.22.23.34;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.29.17.14.08;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.16.22.43.51;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.16.20.06.53;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.11.04.21.43;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.10.16.19.04;	author suan;	state Exp;
branches;
next	;


desc
@Identifier, and IDmap/IDlist mappings.
@


1.14
log
@ADDED: is_zeroed field to AO!  (But only outermost (declared)
	objects will be marked)
Changed mbu4 so that
 - function calls don't gen new mbu facts;
 - at function entry, isZeroed objects are excluded
   from initial facts (intra mode)
@
text
@#include <stdio.h>
#include <string.h>

#include "id.h"
#include "ao.h"

//------------------------------------------------------
//- ID

ID::ID(char * n, char sc, bool isl)
: key(0), name(0), ao(0), islib(isl),
  stclass((sc=='A')?AUTO:((sc=='H')?HEAP:STATIC))
{
  name = new char[strlen(n)+1];
  strcpy(name,n);
}

ID::~ID()
{
  if(name) delete [] name;
  if(ao) delete ao;
}

AOId& ID::get_AOId(bool mark_zeroed)
{
  if(ao){
    if(ao->getKind() != AO::aoId){
      fprintf(stderr, "ERROR(ID::get_AOId): expecting AOId, but found ");
      ao->debug_dump(stderr);
      fprintf(stderr, "\n");
    }
    if(mark_zeroed){
      ao->is_zeroed = true;
    }
    return *(AOId *)ao;
  } else {
    ao = new AOId(*this, islib);
    if(mark_zeroed){
      ao->is_zeroed = true;
    }
    return *(AOId *)ao;
  }
}

AOStringLit& ID::get_AOStringLit()
{
  if(ao){
    if(ao->getKind() != AO::aoStringLit){
      fprintf(stderr, "ERROR(ID::get_AOStringLit): expecting AOStringLit, but found ");
      ao->debug_dump(stderr);
      fprintf(stderr, "\n");
    }
    return *(AOStringLit *)ao;
  } else {
    ao = new AOStringLit(*this, islib);
    return *(AOStringLit *)ao;
  }
}

AOMalloc& ID::get_AOMalloc(bool is_alloca, bool mark_zeroed)
{
  if(ao){
    if(ao->getKind() != AO::aoMalloc){
      fprintf(stderr, "ERROR(ID::get_AOMalloc): expecting aoMalloc, but found ");
      ao->debug_dump(stderr);
      fprintf(stderr, "\n");
    }
    ((AOMalloc *)ao)->is_alloca = is_alloca;
    if(mark_zeroed){
      ao->is_zeroed = true;
    }
    return *(AOMalloc *)ao;
  } else {
    ao = new AOMalloc(*this, islib);
    ((AOMalloc *)ao)->is_alloca = is_alloca;
    if(mark_zeroed){
      ao->is_zeroed = true;
    }
    return *(AOMalloc *)ao;
  }
}


//------------------------------------------------------
//- IDmap

IDmap::IDmap(unsigned int s)
: table(new (ID*)[s]), size(s)
{
  for(unsigned int i = 0; i < s; ++i) // zero-initialize
    table[i] = 0;
}

IDmap::~IDmap()
{
  delete [] table;
}

void IDmap::debug_dump(FILE * os)
{
  for(unsigned int i = 0; i < size; ++i)
    if(table[i])
      fprintf(os, "map(%d):[%s]\n", i, table[i]->getname());
}

void IDmap::map(unsigned int key, ID& id)
{
  if(key >= size) grow(key + 10);
  table[key] = &id;
}

ID * IDmap::lookup(unsigned int key)
{
  if(key >= size) return 0;
  else return table[key];
}

void IDmap::grow(unsigned int upto)
{
  unsigned int newsize;
  for(newsize = size; newsize <= upto; newsize *= 2);

  ID ** oldtab = table;
  table = new (ID*)[newsize];

  unsigned int i;
  for(i = 0; i < size; ++i) table[i] = oldtab[i];
  for(; i < newsize; ++i) table[i] = 0;

  size = newsize;
  delete [] oldtab;
}

//------------------------------------------------------
//- IDlist

IDlist::IDlist(unsigned int s)
: table(new (node*)[s]), size(s)
{
  for(unsigned int i = 0; i < size; ++i) // zero-initialize
    table[i] = 0;
}

IDlist::~IDlist()
{
  for(unsigned int i = 0; i < size; ++i){
    node * nptr = table[i];
    while(nptr){
      node * del = nptr;
      nptr = nptr->next;
      delete &del->id;
      delete del;
    }
  }
  delete [] table;
}

void IDlist::debug_dump(FILE * os)
{
  for(unsigned int i = 0; i < size; ++i)
    for(node * nptr = table[i]; nptr; nptr = nptr->next)
      fprintf(os, "ID(%d):[%s]\n", nptr->id.getkey(), nptr->id.getname());
}

void IDlist::traverseAOs(void (*fp)(AO& ao))
{
  for(unsigned int i = 0; i < size; ++i)
    for(node * nptr = table[i]; nptr; nptr = nptr->next)
      if(nptr->id.ao) nptr->id.ao->traverseAOs(fp);
}

void IDlist::traverseIDs(void (*fp)(ID&))
{
  for(unsigned int i = 0; i < size; ++i)
    for(node * nptr = table[i]; nptr; nptr = nptr->next)
      fp(nptr->id);
}

void IDlist::output_aliases(FILE * os, char prefix)
{
  for(unsigned int i = 0; i < size; ++i)
    for(node * nptr = table[i]; nptr; nptr = nptr->next)
      fprintf(os, "%c %d %s\n", prefix, nptr->id.getkey(), nptr->id.getname());
}

ID * IDlist::lookupByName(const char * str)
{
  node * nptr;
  for(nptr = table[hash(str)]; nptr; nptr = nptr->next)
    if(!strcmp(str, nptr->id.name))
      return &nptr->id;
  return 0;
}

ID& IDlist::getID(char * str, char sc)
{
  //-- first, check for library function prefix
  bool islib = false;
  if(!strncmp(str, "._rtclib_", 9)){
    islib = true;
    str += 8;
    *str = '.';
  }
  node ** nptr;
  for(nptr = &table[hash(str)];
      *nptr;
      nptr = &(*nptr)->next){
    int cmp = strcmp(str, (*nptr)->id.name);
    if(cmp == 0){
      if(islib) (*nptr)->id.islib = true;
      return (*nptr)->id;
    } else if(cmp < 0) break;
  }
  ID * newid = new ID(str, sc, islib);
  *nptr = new node(*newid, *nptr);
  return *newid;
}

unsigned int IDlist::assignUIDs(unsigned int start)
{
  for(unsigned int i = 0; i < size; ++i)
    for(node * nptr = table[i]; nptr; nptr = nptr->next)
      nptr->id.setkey(start++);
  return start;
}

unsigned int IDlist::hash(const char * str)
{
  unsigned int h = 0;
  for(const char * c = str; *c; ++c)
    h = 5*h + *c;
  return h % size;
}

//------------------------------------------------------
@


1.13
log
@Augmented to handle ALLOCA:
(solution is hackish at best)
- added is_alloca flag to AOMalloc object.
  HOWEVER, this is set only by flow_sensitive
  PgmExpr/MallocDecl case!
- a second channel of information comes from
  the (long-forgotten) "stclass" field of ID.
  (This is the bit used in -ptr-heapstack mode)
@
text
@d24 1
a24 1
AOId& ID::get_AOId()
d32 3
d38 3
d60 1
a60 1
AOMalloc& ID::get_AOMalloc(bool is_alloca)
d69 3
d76 3
@


1.12
log
@REMOVED:
 - eltype/numelts components of aoMalloc -- new implementation
        now uses setStaticType mechanism to convey this information,
        which is a  better solution that this previous unclean
        approach
   - note that as a result, Interval::setTgt() is now greatly
        simplified, since all objects (from array aoIds to
        aoMallocs to aoStringLits can now be treated uniformly
        by just getting info from the staticType).
FIXED:
 - in CFG::read, I previously had a filter to make sure the
        globnodes (initializer nodes) are either mStaticDecl
        or mAssign; but with change to initializer behavior
        that PARALLEL-izes aggregate initializations, this
        constraint no longer makes sense; in fact I just
        removed the filter altogether, so that globnodes can
        now contain _any_ kind of PgmExpr.
@
text
@d54 1
a54 1
AOMalloc& ID::get_AOMalloc()
d62 1
d66 1
@


1.11
log
@Modified error output messages slightly.
@
text
@d54 1
a54 1
AOMalloc& ID::get_AOMalloc(TCtype * elty, int nelts)
a60 12
    } else if(elty || nelts){
      AOMalloc * mao = (AOMalloc *)ao;
      if(!mao->eltype && !mao->numelts){
        mao->eltype = elty;
        mao->numelts = nelts;
      } else if((mao->eltype != elty) || (mao->numelts != nelts)){
        fprintf(stderr, "WARNING(ID::get_AOMalloc): mismatched elty/nelts, was %d ", mao->numelts);
        if(mao->eltype) mao->eltype->debug_dump(stderr);
        fprintf(stderr, " now %d ", nelts);
        if(elty) elty->debug_dump(stderr);
        fprintf(stderr, "\n");
      }
d64 1
a64 1
    ao = new AOMalloc(*this, elty, nelts, islib);
@


1.10
log
@1. Changed AOMalloc representation to include <eltype, numelts>
   (previously had single <size> field)
2. Changed Interval to store <eltype, numelts> rather than AO
   as "target" field: potentially allows for "smarter" range
   analysis per Susan's suggestion.
(Added runtime flag -ran-[no-]malloc to turn on/off handling
 of malloc objects, now on by default)
TODO: account for elty in Interval::plus/minus (added signature,
      but not yet implemented)
@
text
@d28 1
a28 1
      fprintf(stderr, "ERROR: mismatched types in get_AOId (found ");
d30 1
a30 1
      fprintf(stderr, ")\n");
d43 1
a43 1
      fprintf(stderr, "ERROR: mismatched types in get_AOStringLit (found ");
d45 1
a45 1
      fprintf(stderr, ")\n");
@


1.9
log
@Augmented malloc declaration to include size component, which is a result
of trying to compute a constant size from the expression.
NOTE: there's some trouble with determining the value of sizeof, so for now
**sizeof expressions are evaluated to the value -1** as an indicator for
diagnostic purposes.  IOW, the malloc-size value currently generated SHOULD
NOT BE USED DIRECTLY (should be safe anyways, as long as we're conscious
that a negative size means something is amiss).

The size is currently stored in AOMalloc objects, but not yet used.
@
text
@d54 1
a54 1
AOMalloc& ID::get_AOMalloc(int size)
d61 1
a61 1
    } else if(size){
d63 9
a71 3
      if(mao->size == 0) mao->size = size;
      else if(mao->size != size){
        fprintf(stderr, "WARNING(ID::get_AOMalloc): mismatched sizes, was %d, now %d\n", mao->size, size);
d76 1
a76 1
    ao = new AOMalloc(*this, size, islib);
@


1.8
log
@Gave the code the -Wall treatment: adjusted things to
get rid of warnings:
 - reordered initializers to match declaration order
 - made some destructors virtual (note that for many
   classes with no explicit destructors, I did not
   add explicit virtual destructors, so -Wall warnings
   remain)
 - made some signed/unsigned casts
 - made some pointer/unsigned int casts for printfs
 - filled in unaccounted-for cases in switch statements
@
text
@d54 1
a54 1
AOMalloc& ID::get_AOMalloc()
d58 1
a58 1
      fprintf(stderr, "ERROR: mismatched types in get_AOMalloc (found ");
d60 7
a66 1
      fprintf(stderr, ")\n");
d70 1
a70 1
    ao = new AOMalloc(*this, islib);
@


1.7
log
@HEAPSTACK UPDATE: enhance -ptr/-ptrw mode to optionally consider
freed-heap and stack locations as "possibly invalid" locations.

Added storage class to ID; added helper functions
lookupByName and traverseIDs used by the new stuff.
@
text
@d74 1
a74 1
: size(s), table(new (ID*)[s])
d76 1
a76 1
  for(int i = 0; i < s; ++i) // zero-initialize
d87 1
a87 1
  for(int i = 0; i < size; ++i)
d106 1
a106 1
  int newsize;
d112 1
a112 1
  int i;
d124 1
a124 1
:size(s), table(new (node*)[s])
d126 1
a126 1
  for(int i = 0; i < size; ++i) // zero-initialize
d132 1
a132 1
  for(int i = 0; i < size; ++i){
d146 1
a146 1
  for(int i = 0; i < size; ++i)
d153 1
a153 1
  for(int i = 0; i < size; ++i)
d160 1
a160 1
  for(int i = 0; i < size; ++i)
d167 1
a167 1
  for(int i = 0; i < size; ++i)
d207 1
a207 1
  for(int i = 0; i < size; ++i)
@


1.6
log
@Added initial framework for flow-sensitive stuff in tca.cpp/h.
Wrote functions to connect call/return nodes to function nodes
to create supergraph.
Minor change in id.cpp/h: get_AOId returns reference to AOId
rather than AO object; similarly for get_AOStringLit/get_AOMalloc.
@
text
@d10 3
a12 2
ID::ID(char * n, bool isl)
:key(0), name(0), ao(0), islib(isl)
d158 7
d172 10
a181 1
ID& IDlist::getID(char * str)
d200 1
a200 1
  ID * newid = new ID(str, islib);
d213 1
a213 1
unsigned int IDlist::hash(char * str)
d216 1
a216 1
  for(char * c = str; *c; ++c)
@


1.5
log
@Normalized vargs/largno/islib:
1. Directive from instr-ast is now 'f' for defined function,
   and 'v' for vararg function.
2. library functions are now processed in rtca/id.cpp, which
   recognized (and strips out) the _rtclib_ prefix; the islib
   property is propagated to children AOs as they are created.
3. stat counters and the undef-fn output both now filter out
   isLib objects.
@
text
@d23 1
a23 1
AO& ID::get_AOId()
d31 1
a31 1
    return *ao;
d34 1
a34 1
    return *ao;
d38 1
a38 1
AO& ID::get_AOStringLit()
d46 1
a46 1
    return *ao;
d49 1
a49 1
    return *ao;
d53 1
a53 1
AO& ID::get_AOMalloc()
d61 1
a61 1
    return *ao;
d64 1
a64 1
    return *ao;
@


1.4
log
@Added assignEdgeSet to AOs, and mechanism to insert into
the set without duplication.
Next: use this info to propagate UNSAFE from addr-taken
nodes.
@
text
@d10 2
a11 2
ID::ID(char * n)
:key(0), name(0), ao(0)
d33 1
a33 1
    ao = new AOId(*this);
d48 1
a48 1
    ao = new AOStringLit(*this);
d63 1
a63 1
    ao = new AOMalloc(*this);
d166 7
d178 4
a181 2
    if(cmp == 0) return (*nptr)->id;
    else if(cmp < 0) break;
d183 1
a183 1
  ID * newid = new ID(str);
@


1.3
log
@Added mechanism to store AOs in an AOlist in each AO.
Included mechanism for traversing all AOs, and debug output
functions.
Fairly complete, but not thoroughly tested (especially TypeList
destructors?)
@
text
@d154 1
a154 1
      if(nptr->id.ao) nptr->id.ao->traverse(fp);
@


1.2
log
@Added functions to assign unique IDs and output the aliases
in an ID list.
@
text
@d5 1
d20 1
d23 46
d148 7
@


1.1
log
@Initial revision
@
text
@d102 7
d122 8
@
