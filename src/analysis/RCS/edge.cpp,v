head	1.10;
access;
symbols;
locks; strict;
comment	@// @;


1.10
date	2002.08.15.14.53.34;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.15.14.34.17;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.28.21.37.24;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.23.22.43.31;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.19.16.45.01;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.18.17.06.19;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.18.15.55.32;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.16.22.43.51;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.11.04.21.43;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.10.17.00.45;	author suan;	state Exp;
branches;
next	;


desc
@Edge and Edge List class.
@


1.10
log
@Renamed TCassignEdge::edgeCompare to TCassignEdge::compare;
@
text
@#include <stdio.h>
#include "edge.h"
#include "ao.h"

//------------------------------------------------------

void TCassignEdge::debug_dump(FILE * os)
{
  fprintf(os, "ASSIGN[");
  this->getType().debug_dump(os);
  fprintf(os, "]:(");
  this->getFrom().debug_dump(os);
  fprintf(os, ") -> (");
  this->getTo().debug_dump(os);
  fprintf(os, ")\n");
}

int TCassignEdge::compare(TCassignEdge * le, TCassignEdge * re)
{
  long fromcmp = (long)&le->getFrom() - (long)&re->getFrom();
  if(fromcmp) return fromcmp;
  else {
    long tocmp = (long)&le->getTo() - (long)&re->getTo();
    if(tocmp) return tocmp;
    else return (long)&le->getType() - (long)&re->getType();
  }
}

//------------------------------------------------------
@


1.9
log
@ELIMINATED TCassignEdgeList, TCassignEdgeSet, and TCassignEdgeIterator;
replaced by SUCO equivalents;
entailed writing a new edge compare function.
@
text
@d18 1
a18 1
int TCassignEdge::edgeCompare(TCassignEdge * le, TCassignEdge * re)
@


1.8
log
@Incorporated new format that includes typed-assignments
(: <T> <O>) and verifyTag/verifyPtr (} <T> <O>, ] <O>).
@
text
@d9 3
a11 1
  fprintf(os, "ASSIGN:(");
d18 1
a18 13
//------------------------------------------------------

TCassignEdgeSet::~TCassignEdgeSet()
{
  while(head){
    node * del = head;
    head = head->next;
//- delete edge? for now, no.
    delete del;
  }
}

TCassignEdge * TCassignEdgeSet::insert(AO& to, AO& from, TCtype& ty)
d20 6
a25 7
  node ** np;
  for(np = &head; *np; np = &(*np)->next){
    TCassignEdge& e = (*np)->edge;
    if((&e.getFrom() == &from) &&
	(&e.getTo() == &to) &&
	(&e.getType() == &ty))
      return 0;
a26 32

  TCassignEdge * ret = new TCassignEdge(to, from, ty);
  *np = new node(*ret);
  return ret;
}

void TCassignEdgeSet::debug_dump(FILE * os)
{
  for(node * n = head; n; n = n->next)
    n->edge.debug_dump(os);
}

//------------------------------------------------------

void TCassignEdgeList::append(TCassignEdge& e)
{
  *tailptr = new node(e);
  tailptr = &(*tailptr)->next;
}

//------------------------------------------------------

bool TCassignEdgeIterator::iterate()
{
  if(initial) initial = false;
  else if(nptr) nptr = nptr->next;
  return (nptr != 0);
}

TCassignEdge * TCassignEdgeIterator::current()
{
  return nptr?(&nptr->edge):(TCassignEdge *)0;
@


1.7
log
@Added TCassignEdge.debug_dump.
@
text
@d28 1
a28 1
TCassignEdge * TCassignEdgeSet::insert(AO& to, AO& from)
d34 2
a35 1
	(&e.getTo() == &to))
d39 1
a39 1
  TCassignEdge * ret = new TCassignEdge(to, from);
@


1.6
log
@Removed TCedge and relatives: in graph, pointsTo and inclusion
edges are stored as lists of nodes, rather than an actual edge
objects (as in assignment edges).
@
text
@d7 11
d45 2
a46 7
  for(node * n = head; n; n = n->next){
    fprintf(os, "EDGE:(");
    n->edge.getFrom().debug_dump(os);
    fprintf(os, ") -> (");
    n->edge.getTo().debug_dump(os);
    fprintf(os, ")\n");
  }
@


1.5
log
@Added merge (set union) function.
@
text
@a1 1
#include "ecr.h"
a4 89
//------------------------------------------------------

TCedgeSet::~TCedgeSet()
{
  while(head){
    node * del = head;
    head = head->next;
//- delete edge? for now, no.
    delete del;
  }
}

TCedge * TCedgeSet::insert(ECR& to, ECR& from, TCedge::eKind k)
{
  node ** np;
  for(np = &head; *np; np = &(*np)->next){
    TCedge& e = (*np)->edge;
    if((&e.getFrom() == &from) &&
	(&e.getTo() == &to))
      return 0;
  }

  TCedge * ret = new TCedge(to, from, k);
  *np = new node(*ret);
  return ret;
}

void TCedgeSet::insert_no_check(TCedge& edge)
{
  head = new node(edge, head);
}

void TCedgeSet::debug_dump(FILE * os)
{
  for(node * n = head; n; n = n->next){
    fprintf(os, "EDGE:(");
    n->edge.getFrom().debug_dump(os);
    fprintf(os, ") -> (");
    n->edge.getTo().debug_dump(os);
    fprintf(os, ")\n");
  }
}

//-- currently inefficient (quadratic);
//   to do better, list should be at least sorted
//   - only does pointer-comparison for equality
//   - removes elements from eset
void TCedgeSet::merge(TCedgeSet& eset)
{
  while(eset.head){
    node * ep = eset.head;
    eset.head = eset.head->next;
    node * tp;
    for(tp = this->head; tp; tp = tp->next){
      if(&tp->edge == &ep->edge){ // element found
        delete ep;
        break;
      }
    }
    if(!tp){ // not found: insert into this
      ep->next = this->head; // just transfer the node over
      this->head = ep;
    }
  }
}

//------------------------------------------------------
/*
void TCedgeList::append(TCedge& e)
{
  *tailptr = new node(e);
  tailptr = &(*tailptr)->next;
}
*/
//------------------------------------------------------

bool TCedgeIterator::iterate()
{
  if(initial) initial = false;
  else if(nptr) nptr = nptr->next;
  return (nptr != 0);
}

TCedge * TCedgeIterator::current()
{
  return nptr?(&nptr->edge):(TCedge *)0;
}

//------------------------------------------------------
@


1.4
log
@Added TCedge and TCedgeSet/Iterator
@
text
@d49 23
@


1.3
log
@Added assignEdgeSet to AOs, and mechanism to insert into
the set without duplication.
Next: use this info to propagate UNSAFE from addr-taken
nodes.
@
text
@d2 1
d6 66
@


1.2
log
@Added edge iterator.
@
text
@d1 1
d3 1
d7 1
a7 1
TCedgeList::~TCedgeList()
d17 1
a17 1
void TCedgeList::insert(TCedge& e)
d19 11
a29 3
//- for now, just insert, don't check for duplicates
  *tailptr = new node(e);
  tailptr = &(*tailptr)->next;
d32 1
a32 1
void TCedgeList::debug_dump(FILE * os)
d45 9
a53 1
bool TCedgeIterator::iterate()
d60 1
a60 1
TCedge * TCedgeIterator::current()
d62 1
a62 1
  return nptr?(&nptr->edge):(TCedge *)0;
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
    n->edge.from.debug_dump(os);
d28 1
a28 1
    n->edge.to.debug_dump(os);
d31 14
@
