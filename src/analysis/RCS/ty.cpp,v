head	1.25;
access;
symbols;
locks; strict;
comment	@// @;


1.25
date	2004.03.31.15.17.54;	author suan;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.28.20.06.16;	author suan;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.07.05.30.41;	author suan;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.23.16.12.01;	author suan;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.22.00.20.20;	author suan;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.21.23.47.23;	author suan;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.21.23.25.21;	author suan;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.20.16.56.39;	author suan;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.19.16.41.34;	author suan;	state Exp;
branches;
next	1.16;

1.16
date	2002.11.29.16.45.56;	author suan;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.15.17.49.43;	author suan;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.18.16.15.21;	author suan;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.16.23.20.35;	author suan;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.16.21.56.08;	author suan;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.16.20.28.52;	author suan;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.16.16.57.31;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.15.23.39.23;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.30.19.48.50;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.29.21.29.44;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.21.21.54.04;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.21.21.52.26;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.16.20.10.51;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.16.20.06.53;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.11.04.21.43;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.10.16.19.04;	author suan;	state Exp;
branches;
next	;


desc
@Types, including Type Lists.
@


1.25
log
@Added SizeOf() member function, to compute a size
of a type based on a roughly-put-together sizing
scheme (more-or-less consistent with Linux/x86).
@
text
@#include <ctype.h>
#include <stdio.h>
#include <stdlib.h> // for strtoul

#include "flags.h"
#include "diag.h"
#include "ty.h"

//------------------------------------------------------
//- TCtype

TCtype TCtype::tcVoidType = TCtype(tcVoid);
TCtype TCtype::tcZeroType = TCtype(tcZero);
TCtype TCtype::tcIntType = TCtype(tcInt);
TCtype TCtype::tcCharType = TCtype(tcChar);
TCtype TCtype::tcShortType = TCtype(tcShort);
TCtype TCtype::tcLongType = TCtype(tcLong);
TCtype TCtype::tcLongLongType = TCtype(tcLongLong);
TCtype TCtype::tcFloatType = TCtype(tcFloat);
TCtype TCtype::tcDoubleType = TCtype(tcDouble);
TCtype TCtype::tcLongDoubleType = TCtype(tcLongDouble);

TCpointerType TCpointerType::tcVoidPtrType = TCpointerType(0);

const char * TCtype::kindString()
{
  switch(kind){
    case tcVoid: return "tcVoid";
    case tcZero: return "tcZero";
    case tcInt: return "tcInt";
    case tcChar: return "tcChar";
    case tcShort: return "tcShort";
    case tcLong: return "tcLong";
    case tcLongLong: return "tcLongLong";
    case tcFloat: return "tcFloat";
    case tcDouble: return "tcDouble";
    case tcLongDouble: return "tcLongDouble";
    case tcPointer: return "tcPointer";
    case tcStruct: return "tcStruct";
    case tcUnion: return "tcUnion";
    case tcArray: return "tcArray";
    case tcBitField: return "tcBitField";
    case tcFunction: return "tcFunction";
    default: return "ERROR";
  }
}

char TCtype::kindCode()
{
  switch(kind){
    case tcVoid: return 'v';
    case tcZero: return 'z';
    case tcInt: return 'i';
    case tcChar: return 'c';
    case tcShort: return 'h';
    case tcLong: return 'l';
    case tcLongLong: return 'g';
    case tcFloat: return 'f';
    case tcDouble: return 'd';
    case tcLongDouble: return 'e';
    case tcPointer: return 'p';
    case tcStruct: return 's';
    case tcUnion: return 'u';
    case tcArray: return 'a';
    case tcBitField: return 'b';
    case tcFunction: return 'x';
    default: return '!'; //-error
  }
}

void TCtype::debug_dump(FILE * os)
{
  fprintf(os, kindString());
}

void TCtype::write_string_rep(FILE * os)
{
  fprintf(os, "%c ", kindCode());
}

bool TCtype::equals(TCtype &t) const
{
  if(kind != t.kind) return false;
  switch(kind){
    case tcVoid:
    case tcZero:
    case tcInt:
    case tcChar:
    case tcShort:
    case tcLong:
    case tcLongLong:
    case tcFloat:
    case tcDouble:
    case tcLongDouble:
	 return true;

    case tcPointer:
	 return ((TCpointerType *)this)->ty.equals(((TCpointerType&)t).ty);

    case tcStruct:
    case tcUnion:
	 return TCtype::listEquals(((TCstructUnionType *)this)->tylist,((TCstructUnionType&)t).tylist);

    case tcArray:
    case tcBitField:{
	   TCnumType * lhs = (TCnumType *)this;
	   TCnumType * rhs = (TCnumType *)&t;
	   return (lhs->size == rhs->size) && lhs->ty.equals(rhs->ty);
	 }

    case tcFunction:{
	   TCfunctionType * lhs = (TCfunctionType *)this;
	   TCfunctionType * rhs = (TCfunctionType *)&t;
	   return lhs->rty.equals(rhs->rty) &&
		TCtype::listEquals(lhs->tylist, rhs->tylist);
	 }

    default: return true; //-error
  }
}

bool TCtype::equiv(TCtype &t) const
{
  if(kind != t.kind) return false;
  switch(kind){
    case tcVoid:
    case tcZero:
    case tcInt:
    case tcChar:
    case tcShort:
    case tcLong:
    case tcLongLong:
    case tcFloat:
    case tcDouble:
    case tcLongDouble:
    case tcPointer:
	 return true;

    case tcStruct:
    case tcUnion:
	 return TCtype::listEquiv(((TCstructUnionType *)this)->tylist, ((TCstructUnionType&)t).tylist);

    case tcArray:
    case tcBitField:{
	   TCnumType * lhs = (TCnumType *)this;
	   TCnumType * rhs = (TCnumType *)&t;
	   return (lhs->size == rhs->size) && lhs->ty.equiv(rhs->ty);
	 }

    case tcFunction:{
	   TCfunctionType * lhs = (TCfunctionType *)this;
	   TCfunctionType * rhs = (TCfunctionType *)&t;
	   return lhs->isEmpty() || rhs->isEmpty() ||
		(lhs->rty.equiv(rhs->rty) &&
		 TCtype::listEquiv(lhs->tylist, rhs->tylist));
	 }

    default: return true; //-error
  }
}

TCtype * TCtype::stringToTy(char * str, char ** nptr)
{
  char * c = str;
  while(isspace(*c)) c++;
  *nptr = c+1;
  switch(*c){
    case 'a': {
        unsigned int size = strtoul(c+1, &c, 10);
	TCtype * bty = stringToTy(c, nptr);
	if(!bty){
	  fprintf(stderr, "Malformed array type\n");
          return 0;
	}
	return new TCnumType(tcArray, size, *bty);
      }
    case 'b': {
        unsigned int size = strtoul(c+1, &c, 10);
	TCtype * bty = stringToTy(c, nptr);
	if(!bty){
	  fprintf(stderr, "Malformed bitfield type\n");
          return 0;
	}
	return new TCnumType(tcBitField, size, *bty);
      }
    case 'c': return &tcCharType;
    case 'd': return &tcDoubleType;
    case 'e': return &tcLongDoubleType;
    case 'f': return &tcFloatType;
    case 'g': return &tcLongLongType;
    case 'h': return &tcShortType;
    case 'i': return &tcIntType;
    case 'l': return &tcLongType;
    case 'p': return &TCpointerType::tcVoidPtrType;
    case 's':{
        suco_llist<TCtype *>& tylist = TCtype::stringToTyList(c+1, nptr);
	return new TCstructUnionType(tcStruct, tylist);
      }
    case 'u':{
        suco_llist<TCtype *>& tylist = TCtype::stringToTyList(c+1, nptr);
	return new TCstructUnionType(tcUnion, tylist);
      }
    case 'v': return &tcVoidType; /* return new TCtype(tcVoid); */
    case 'x': {
	TCtype * ty = stringToTy(c+1, &c);
	if(!ty){
	  fprintf(stderr, "Malformed function type\n");
          ty = new TCtype(tcInt);
	}
        suco_llist<TCtype *>& tylist = TCtype::stringToTyList(c, nptr);
	return new TCfunctionType(*ty, tylist);
      }
    case 'z': return &tcZeroType; /* return new TCtype(tcZero); */
    default :
      fprintf(stderr, "Invalid type identifier [%c] (%s)\n", *c, c);
      return 0; // invalid type
  }
}

void TCtype::deleteTy(TCtype& ty)
{
  if(ty.cleanup()) delete &ty;
}

//------------------------------------------------------
//- TCtype subtype inherited methods

void TCstructUnionType::debug_dump(FILE * os)
{
  fprintf(os, "%s(", kindString());
  debug_dump_list(tylist, os);
  fprintf(os, ")");
}

void TCfunctionType::debug_dump(FILE * os)
{
  fprintf(os, "%s[", kindString());
  rty.debug_dump(os);
  fprintf(os, "](");
  debug_dump_list(tylist, os);
  fprintf(os, ")");
}

void TCpointerType::debug_dump(FILE * os)
{
  fprintf(os, "%s[", kindString());
  ty.debug_dump(os);
  fprintf(os, "]");
}

void TCnumType::debug_dump(FILE * os)
{
  fprintf(os, "%s[", kindString());
  ty.debug_dump(os);
  fprintf(os, "](%d)",size);
}

//- - - - - - - - - - - - - - - -

void TCstructUnionType::write_string_rep(FILE * os)
{
  fprintf(os, "%c ", kindCode());
  write_list_string_rep(tylist, os);
  fprintf(os, "; ");
}

void TCfunctionType::write_string_rep(FILE * os)
{
  fprintf(os, "%c ", kindCode());
  rty.write_string_rep(os);
  write_list_string_rep(tylist, os);
  fprintf(os, "; ");
}

void TCpointerType::write_string_rep(FILE * os)
{ //- string rep of pointer excludes its target type,
  //  to avoid infinite recursion
  fprintf(os, "%c ", kindCode());
}

void TCnumType::write_string_rep(FILE * os)
{
  fprintf(os, "%c %d ", kindCode(), size);
  ty.write_string_rep(os);
}

//- - - - - - - - - - - - - - - -
//- countInstancesOf: estimate the ratio |this|/|ty|
//  by counting the occurrences of "ty" or larger -typed
//  objects in this object.
//- Scalar size assumptions are:
//  1. |char| <= everything except bitfields
//  2. |char|<=|short|<=|int|<=|long|<=|longlong|
//  3. |float|<=|double|<=|longdouble|?
int TCtype::countInstancesOf(TCtype& ty) const
{
  // this in {tcVoid, tcZero, tcInt, tcChar, tcShort, tcLong, tcLongLong,
  //          tcFloat, tcDouble, tcLongDouble}

  if((this->getKind() == tcVoid) || (this->getKind() == tcZero)){
    return 0; //- report error?
  }
  switch(ty.getKind()){
    case tcChar:
      return 1;
    case tcShort:
      return ( (this->getKind() == tcShort)
		|| (this->getKind() == tcInt)
		|| (this->getKind() == tcLong)
		|| (this->getKind() == tcLongLong)
	     ) ? 1 : 0;
    case tcInt:
      return ( (this->getKind() == tcInt)
		|| (this->getKind() == tcLong)
		|| (this->getKind() == tcLongLong)
	     ) ? 1 : 0;
    case tcLong:
      return ( (this->getKind() == tcLong)
		|| (this->getKind() == tcLongLong)
	     ) ? 1 : 0;
    case tcLongLong:
      return (this->getKind() == tcLongLong) ? 1 : 0;

    case tcFloat:
      return ( (this->getKind() == tcFloat)
		|| (this->getKind() == tcDouble)
		|| (this->getKind() == tcLongDouble)
	     ) ? 1 : 0;
    case tcDouble:
      return ( (this->getKind() == tcDouble)
		|| (this->getKind() == tcLongDouble)
	     ) ? 1 : 0;
    case tcLongDouble:
      return (this->getKind() == tcLongDouble) ? 1 : 0;

    case tcPointer:
    case tcStruct:
    case tcUnion:
    case tcArray:
    case tcBitField:
      return 0;

    default:
    case tcFunction:
    case tcVoid:
    case tcZero:
      // report error?
      return 0;
  }
}

//- this in { tcStruct, tcUnion }
int TCstructUnionType::countInstancesOf(TCtype& ty) const
{
  if(this->getKind() == tcStruct){
    //- First, check to see if this struct is a subtype of ty,
    //  where subtype is defined by the C "common-initial-sequence"
    //  criterion.
    if(ty.getKind() == tcStruct &&
	TCtype::listEquivPrefix(((TCstructUnionType &)ty).tylist, this->tylist)){
      return 1;
    }

    //- return sum { t.countInstancesOf(ty) | t in tylist }
    int sum = 0;
    suco_iterator<TCtype *> ti(this->tylist);
    while(ti.Iterate())
      sum += ti.Current()->countInstancesOf(ty);
    return sum;

  } else { //- tcUnion
    //- return max { t.countInstancesOf(ty) | t in tylist }
    int max = 0;
    suco_iterator<TCtype *> ti(this->tylist);
    while(ti.Iterate()){
      int n = ti.Current()->countInstancesOf(ty);
      if(max < n) max = n;
    }
    return max;

  }
  return 0;
}

int TCfunctionType::countInstancesOf(TCtype& ty) const
{
  return 0; //- report error?
}

//- this = tcPointer
int TCpointerType::countInstancesOf(TCtype& ty) const
{
  return ((ty.getKind() == tcPointer) || (ty.getKind() == tcChar))
	 ? 1 : 0;
}

//- this in { tcArray, tcBitField }
int TCnumType::countInstancesOf(TCtype& ty) const
{
  if(this->getKind() == tcArray){
    return this->getBaseType().countInstancesOf(ty) * this->getSize();
  } else { //- tcBitField
    return 0;
  }
}

//- - - - - - - - - - - - - - - -
//- SizeOf()
//  - return size based on a "common" scheme:
//    - |char|		= 1
//    - |short|		= 2
//    - |int|		= 4
//    - |long|		= 4
//    - |long long|	= 8
//    - |float|		= 4
//    - |double|	= 8
//    - |long double|	= 12
//    - |any pointer|	= 4
//    - array: |t[c]|	= c * |t|
//    - struct/union: assume padding to get 4-byte alignment
int TCtype::SizeOf() const
{
  switch(this->getKind()){
    case tcChar:	return 1;
    case tcShort:	return 2;
    case tcInt:		return 4;
    case tcLong:	return 4;
    case tcLongLong:	return 8;
    case tcFloat:	return 4;
    case tcDouble:	return 8;
    case tcLongDouble:	return 12;
    case tcPointer:	return 4;

    case tcStruct:
    case tcUnion:
    case tcArray:
    case tcBitField:
    default:
    case tcFunction:
    case tcVoid:
    case tcZero:	return 0;
  }
}

int TCstructUnionType::SizeOf() const
{
#define ALIGNMENT_OF(numbytes) (		\
		(numbytes == 0)			\
		? 0 : ( (numbytes % 2)		\
			? 1 : ( (numbytes % 4)	\
				? 2 : 4		\
			)	))

#define ADD_BYTES_TO_SUM(numbytes) do {			\
	  int new_align = ALIGNMENT_OF(numbytes);	\
	  if(align < new_align)				\
	    align = new_align;				\
	  if(sum % new_align != 0)			\
	    sum += new_align - (sum % new_align);	\
	  sum += numbytes;				\
	} while(0)

#define ADD_BITSIZES_TO_SUM do {			\
	  if(bit_tysize) {				\
	    int numbytes = 1 + numbits/(bit_tysize<<3);	\
	    ADD_BYTES_TO_SUM(numbytes);			\
	    bit_tysize = numbits = 0;			\
	  }						\
	} while(0)

  if(this->getKind() == tcStruct){
    int sum = 0;
    int align = 0;
    int numbits = 0;
    int bit_tysize = 0;
    suco_iterator<TCtype *> ti(this->tylist);
    while(ti.Iterate()){
      if(ti.Current()->getKind() == tcBitField){
        TCnumType& nt = *((TCnumType *)ti.Current());
        if(bit_tysize == nt.getBaseType().SizeOf()){
          numbits += nt.getSize();
        } else {
          ADD_BITSIZES_TO_SUM;
          bit_tysize = nt.getBaseType().SizeOf();
          numbits += nt.getSize();
        }
      } else {
        ADD_BITSIZES_TO_SUM;
        int elsize = ti.Current()->SizeOf();
        ADD_BYTES_TO_SUM(elsize);
      }
    }
    ADD_BITSIZES_TO_SUM;
    if(sum % align != 0)	//- terminal padding
      sum += align - (sum % align);
    return sum;

  } else { //- tcUnion
    int max = 0;
    int align = 0;
    suco_iterator<TCtype *> ti(this->tylist);
    while(ti.Iterate()){
      int n = ti.Current()->SizeOf();
      int n_align = ALIGNMENT_OF(n);
      if(align < n_align)
         align = n_align;
      if(max < n)
         max = n;
    }
    if(max % align != 0)
      max += align - (max % align);
    return max;
  }
#undef ADD_BITSIZES_TO_SUM
#undef ADD_BYTES_TO_SUM
#undef ALIGNMENT_OF
}

int TCnumType::SizeOf() const
{
  if(this->getKind() == tcArray)
    return this->size * this->ty.SizeOf();
  else //- bitfield
    return 0;
}

//------------------------------------------------------
//- TCtype list operations

void TCtype::debug_dump_list(suco_llist<TCtype *>& tl, FILE * os)
{
  suco_iterator<TCtype *> ti(tl);
  bool initial = true;
  while(ti.Iterate()){
    if(initial) initial = false;
    else fprintf(os, ",");
    ti.Current()->debug_dump(os);
  }
}

void TCtype::write_list_string_rep(suco_llist<TCtype *>& tl, FILE * os)
{
  suco_iterator<TCtype *> ti(tl);
  while(ti.Iterate())
    ti.Current()->write_string_rep(os);
}

suco_llist<TCtype *>& TCtype::stringToTyList(char * str, char ** nptr)
{
  suco_llist<TCtype *>& list = *new suco_llist<TCtype *>;
  char * c = str;
  while(isspace(*c)) c++;
  while(*c && *c != ';'){
    TCtype * ty = TCtype::stringToTy(c,&c);
    if(!ty){ //- error
      fprintf(stderr, "Malformed type list (%s)\n", c);
      *nptr = c;
      return list;
    }
    list.Append(ty);
    while(isspace(*c)) c++;
  }
  *nptr = c+1;
  return list;
}

void TCtype::deleteTyList(suco_llist<TCtype *>& tl)
{
  suco_iterator<TCtype *> ti(tl);
  while(ti.Iterate())
    deleteTy(*ti.Current());
  delete &tl;
}

bool TCtype::listEquals(suco_llist<TCtype *>& l1, suco_llist<TCtype *>& l2)
{
  suco_iterator<TCtype *> i1(l1);
  suco_iterator<TCtype *> i2(l2);
  while(i1.Iterate() & i2.Iterate())  //- DON'T DO LOGICAL-AND: don't short-circuit i2.Iterate!
    if(!i1.Current()->equals(*i2.Current()))
      return false;
  return (!i1.Current() && !i2.Current());
}

bool TCtype::listEquiv(suco_llist<TCtype *>& l1, suco_llist<TCtype *>& l2)
{
  suco_iterator<TCtype *> i1(l1);
  suco_iterator<TCtype *> i2(l2);
  while(i1.Iterate() & i2.Iterate()) //- DON'T DO LOGICAL-AND: don't short-circuit i2.Iterate!
    if(!i1.Current()->equiv(*i2.Current()))
      return false;
  return (!i1.Current() && !i2.Current());
}

//- Is prefix_list a prefix of full_list?
//  If so, return the element in full_list corresponding to the last element of prefix_list; else, return 0
//  Useful for identifying subtypes by C's "common-initial-sequence" criterion
//- NOTE: will return 0 if prefix_list is empty (may arise with empty structs??)
TCtype * TCtype::listEquivPrefix(suco_llist<TCtype *>& prefix_list, suco_llist<TCtype *>& full_list)
{
  suco_iterator<TCtype *> i1(prefix_list);
  suco_iterator<TCtype *> i2(full_list);
  TCtype * ret = 0;
  while(i1.Iterate()){
    if(i2.Iterate() && i1.Current()->equiv(*i2.Current())){
      ret = i2.Current();	//- key here: return i2.Current instead of i1.Current ~~ a quirk needed by Interval::adjustStructOffset()
    } else return 0;
  }
  return ret;
}

//------------------------------------------------------

TClatType::latKind TClatType::getLatKindFor(TCtype& t)
{
  switch(t.getKind()){
    case TCtype::tcChar:	return tclChar;
    case TCtype::tcShort:	return tclShort;
    case TCtype::tcInt:		return tclInt;
    case TCtype::tcLong:	return tclLong;
    case TCtype::tcLongLong:	return tclLongLong;
    case TCtype::tcFloat:	return tclFloat;
    case TCtype::tcDouble:	return tclDouble;
    case TCtype::tcLongDouble:	return tclLongDouble;
    case TCtype::tcPointer:	return tclPointer;
    case TCtype::tcZero:	return tclZero;
    default:
	fprintf(stderr, "Invalid lattice type initialization: ");
	t.debug_dump(stderr);
	fprintf(stderr, "\n");
	return tclBottom;
  }
}

TClatType::latKind TClatType::Join(latKind k1, latKind k2)
{
  if(k1 == k2) return k1;
  else {
    if((k1 / 100) == (k2 / 100)){ //- only possible if both are scalar
      return tclZero;
    } else return (k1 > k2) ? k1 : k2;
  }
}

TClatType::latKind TClatType::Meet(latKind k1, latKind k2)
{
  if(k1 == k2) return k1;
  else {
    if((k1 / 100) == (k2 / 100)){ //- only possible if both are scalar
      return tclBottom;
    } else return (k1 < k2) ? k1 : k2;
  }
}

void TClatType::join(latKind k)
{
  kind = Join(kind, k);
}

void TClatType::meet(latKind k)
{
  kind = Meet(kind, k);
}

void TClatType::Debug_dump(latKind k, FILE * os)
{
  switch(k){
    case tclBottom:	fprintf(os, "tclBottom"); break;
    case tclChar:	fprintf(os, "tclChar"); break;
    case tclShort:	fprintf(os, "tclShort"); break;
    case tclInt:	fprintf(os, "tclInt"); break;
    case tclLong:	fprintf(os, "tclLong"); break;
    case tclLongLong:	fprintf(os, "tclLongLong"); break;
    case tclFloat:	fprintf(os, "tclFloat"); break;
    case tclDouble:	fprintf(os, "tclDouble"); break;
    case tclLongDouble:	fprintf(os, "tclLongDouble"); break;
    case tclPointer:	fprintf(os, "tclPointer"); break;
    case tclZero:	fprintf(os, "tclZero"); break;
    case tclTop:	fprintf(os, "tclTop"); break;
  }
}

void TClatType::debug_dump(FILE * os)
{
  Debug_dump(kind, os);
}

//-- constrains this <= gl
//   note that this adds "this" to gl's nodesLEthis list
//   (rather than vice versa, as might be expected)
void TClatType::constrainLE(TClatType& gl)
{
  TCstats::num_pt_constraints++;
  gl.nodesLEthis.Insert(this);
}

//------------------------------------------------------

TClatRootSet::TClatRootSet()
{
  roots[lrBottom].setKind(TClatType::tclBottom);
  roots[lrChar].setKind(TClatType::tclChar);
  roots[lrShort].setKind(TClatType::tclShort);
  roots[lrInt].setKind(TClatType::tclInt);
  roots[lrLong].setKind(TClatType::tclLong);
  roots[lrLongLong].setKind(TClatType::tclLongLong);
  roots[lrFloat].setKind(TClatType::tclFloat);
  roots[lrDouble].setKind(TClatType::tclDouble);
  roots[lrLongDouble].setKind(TClatType::tclLongDouble);
  roots[lrPointer].setKind(TClatType::tclPointer);
  roots[lrZero].setKind(TClatType::tclZero);
  roots[lrTop].setKind(TClatType::tclTop);
}

void TClatRootSet::debug_dump(FILE * os)
{
  int i;
  fprintf(os, "TClatRootSet stats:\n");
  for(i = 0; i < lrMax; ++i){
    roots[i].debug_dump(os);
    fprintf(os, ": %d LE constraints\n", roots[i].nodesLEthis.Length());
  }
}

TClatType& TClatRootSet::getLatType(TCtype& t)
{
  switch(t.getKind()){
    case TCtype::tcChar:	return roots[lrChar];
    case TCtype::tcShort:	return roots[lrShort];
    case TCtype::tcInt:		return roots[lrInt];
    case TCtype::tcLong:	return roots[lrLong];
    case TCtype::tcLongLong:	return roots[lrLongLong];
    case TCtype::tcFloat:	return roots[lrFloat];
    case TCtype::tcDouble:	return roots[lrDouble];
    case TCtype::tcLongDouble:	return roots[lrLongDouble];
    case TCtype::tcPointer:	return roots[lrPointer];
    case TCtype::tcZero:	return roots[lrZero];
    case TCtype::tcVoid:	return roots[lrBottom];
    default:
	fprintf(stderr, "Invalid lattice root lookup: ");
	t.debug_dump(stderr);
	fprintf(stderr, "\n");
	return roots[lrBottom];
  }
}

void TClatRootSet::traverseMeetWith(TClatType& node, TClatType::latKind lty)
{
  if(TClatType::LE(node.kind, lty)) return; // no need to go further

  TCstats::num_constraint_solving_visits++;

  node.meet(lty);

  suco_iterator<TClatType *> lei(node.nodesLEthis);
  while(lei.Iterate())
    traverseMeetWith(*lei.Current(), lty);
}

void TClatRootSet::solveMeet()
{
  int i;
  for(i = 0; i < lrMax; ++i){
    TClatType::latKind ity = roots[i].kind;
    suco_iterator<TClatType *> lei(roots[i].nodesLEthis);
    while(lei.Iterate())
      traverseMeetWith(*lei.Current(), ity);

    if(flag_verbose > 2){
      static int last_constr_visits = 0;
      fprintf(stderr, "Nodes Visited for kind ");
      roots[i].debug_dump(stderr);
      fprintf(stderr, " = %d\n", TCstats::num_constraint_solving_visits - last_constr_visits);
      last_constr_visits = TCstats::num_constraint_solving_visits;
    }
  }
}

//------------------------------------------------------
@


1.24
log
@Removed countNumUnits();
changed countInstancesOf() to account for relative sizes
of types (|char|<=|short|<=|int|<=|long|...)
@
text
@d407 120
@


1.23
log
@Range analysis: added support for evaluating arroW/Member
expressions.  Changes are:
 - TCtype::listEquivPrefix: instead of returning bool,
   now returns the TCtype of the last matching item.
 - Interval: added setTgt(TCtype&), which was previously
   included as part of setTgt(AO&).
 - Interval: added adjustStructOffset() to perform the
   meat of the arroW/Member handling.
 - RANfact: added handlers for arroW/Member.
@
text
@d288 8
a295 7
//- countNumUnits: counts the number of scalar "units"
//  in this type ~~ used as an underestimation of
//  the type's size in bytes.
//  The only caveat is bitfields, which are counted
//  as 0.

int TCstructUnionType::countNumUnits() const
d297 2
a298 7
  if(this->getKind() == tcStruct){
    //- return sum { countNumSize(t) | t in tylist }
    int sum = 0;
    suco_iterator<TCtype *> ti(this->tylist);
    while(ti.Iterate())
      sum += ti.Current()->countNumUnits();
    return sum;
d300 2
a301 9
  } else { //- tcUnion
    //- return max { countNumSize(t) | t in tylist }
    int max = 0;
    suco_iterator<TCtype *> ti(this->tylist);
    while(ti.Iterate()){
      int numu = ti.Current()->countNumUnits();
      if(max < numu) max = numu;
    }
    return max;
d303 46
a348 10
}

int TCnumType::countNumUnits() const
{
  if(this->getKind() == tcArray){
    return this->getBaseType().countNumUnits() * this->getSize();
  } else { //- tcBitField
    return 0; //- For now, simply don't count bitfields.
	      //  We could certainly be smarter about this,
	      //  but the code'd be a little more complicated.
d352 1
a352 16
//- - - - - - - - - - - - - - - -
//- countInstancesOf: counts (max) occurrences of
//  "ty" (equiv or subtype) in this object.
//  This will be used by Interval::adjustTypes()
//  to approximate the size of one type as an
//  array of another type.
//  The above function (countNumberUnits()) can
//  be thought of as a specialized version of
//  countInstancesOf(tcChar), but assuming that
//  tcChar is a subtype of all other types
//  (except bitfields and functions).
int TCtype::countInstancesOf(TCtype& ty) const
{
  return this->equiv(ty)?1:0;
}

d385 13
@


1.22
log
@Added refinements to Interval::adjustTypes:
 - if rhs has target: ok under unit-addition if lhs
   has no target ~~ just flip them.
 - under unit-addition: if shrinking tgt_elty, then
   augment tgt_numelts with countNumUnits, which
   counts the number of (non-bitfield) scalar
   entities in (the original) tgt_elty ~~ this is
   a safe under-approximation of the sice of tgt_elty
   in bytes.
 - on type mismatch, check for cases where tgt_elty
   actually contains a number of eltys, e.g. if tgt_elty
   is a union which includes an array of eltys.
   A generalized solution is adopted, where we use the
   newly-added TCtype::countInstancesOf() function
   which counts the occurrences of elty within tgt_elty.
   This function also recognizes common-init-sequence
   subtyping.
   (NOTE: there's one pathological case in which the
    current version would be suboptimal: when checking
    tgt_elty->countInstancesOf(elty), if
     elty     : struct { T1, T2 }
     tgt_elty : struct { T1, T2, struct{T1,T2}[10] }
    current version would return 1 because of subtype
    recognition, when in principle it could've returned 11.)
 - in cases where we heuristically check for tgt-ed
   intervals with [0,0], call newly-added slide_if_constant()
   method to check for cases of A[s]+[i,i] where i < s;
   then "slide" the interval to get A[s-i]+[0,0].
@
text
@d453 1
d455 2
a456 1
bool TCtype::listEquivPrefix(suco_llist<TCtype *>& prefix_list, suco_llist<TCtype *>& full_list)
d460 7
a466 4
  while(i1.Iterate() && i2.Iterate())
    if(!i1.Current()->equiv(*i2.Current()))
      return false;
  return true;
@


1.21
log
@Added TCtype::countNumUnits(), which counts the number
of "units" excluding bitfields within each type.
This is used in a new Interval::adjustTypes() refinement:
if elty is char and tgt_ty is a struct, instead of just
shrinking, multiply by countNumUnits(), a safe under-
approximation of the size of the type in (char) bytes.
@
text
@d81 1
a81 1
bool TCtype::equals(TCtype &t)
d122 1
a122 1
bool TCtype::equiv(TCtype &t)
d226 1
a226 1
//- TCtype subtypes
d297 1
a297 1
    //- return sum { countNumSize(t) |t in tylist }
d305 1
a305 1
    //- return max { countNumSize(t) |t in tylist }
d327 57
d450 12
@


1.20
log
@Added deleteTyList() destructor function, which deleteTy()s
each component TCtype before destructing itself.
Note that unlike deleteTy(), the lack of protected
destructor for suco_llist<TCtype *> means the type system
cannot require the use of this function.
@
text
@d287 40
@


1.19
log
@Semimajor change: eliminated TCtypeList class; replaced
with suco_llist<TCtype *>.
The only semantic change is that destruction is not
recursive, so a lot of leakage is likely.
(Next change: devise a single-representative storage?
)
@
text
@d327 8
@


1.18
log
@Major Change: ExpDescr estr augmented Sub(B)
and plus/minus to include elty; further,
remapped plus/minus to new representations:

  Sub:   B(e1,e2)   -> B(e1,e2,elty)
  Binop: o+(e1,e2)  -> p+(e1,e2,elty)
         o-(e1,e2)  -> p-(e1,e2,elty)
         O+=(e1,e2) -> p#(e1,e2,elty)
         O-=(e1,e2) -> p=(e1,e2,elty)
  Unop:  U+<(e)     -> U+<(e,elty)
         U+>(e)     -> U+>(e,elty)
         U-<(e)     -> U-<(e,elty)
         U->(e)     -> U->(e,elty)

For plain (non-pointer) arithmetic, elty = tcVoid.

NOT YET DONE: change body of Interval.plus/minus
to account for elty.

Auxiliary change: Interval::deleteTy now takes
a reference rather than a pointer.
@
text
@d102 1
a102 1
	 return ((TCstructUnionType *)this)->tylist.equals(((TCstructUnionType&)t).tylist);
d114 2
a115 1
	   return lhs->rty.equals(rhs->rty) && lhs->tylist.equals(rhs->tylist);
d141 1
a141 1
	 return ((TCstructUnionType *)this)->tylist.equiv(((TCstructUnionType&)t).tylist);
d154 2
a155 1
		(lhs->rty.equiv(rhs->rty) && lhs->tylist.equiv(rhs->tylist));
d196 1
a196 1
        TCtypeList& tylist = TCtypeList::stringToTyList(c+1, nptr);
d200 1
a200 1
        TCtypeList& tylist = TCtypeList::stringToTyList(c+1, nptr);
d210 1
a210 1
        TCtypeList& tylist = TCtypeList::stringToTyList(c, nptr);
d231 1
a231 1
  tylist.debug_dump(os);
d240 1
a240 1
  tylist.debug_dump(os);
d263 1
a263 1
  tylist.write_string_rep(os);
d271 1
a271 1
  tylist.write_string_rep(os);
d288 1
a288 1
//- TCtypeList
d290 1
a290 18
TCtypeList::node * TCtypeList::node::freelist = 0;

TCtypeList::node * TCtypeList::node::acquire(TCtype &t, TCtypeList::node * n)
{
  if(freelist){
    TCstats::recy_ty_nodes++;
    node * nn = freelist;
    freelist = freelist->next;
    nn->ty = &t;
    nn->next = n;
    return nn;
  } else {
    TCstats::new_ty_nodes++;
    return new node(t,n);
  }
}

void TCtypeList::node::dispose(TCtypeList::node * n)
d292 6
a297 6
  if(flag_recycle){
    n->ty = 0;
    n->next = freelist;
    freelist = n;
  } else {
    delete n;
d301 1
a301 1
TCtypeList::~TCtypeList()
d303 3
a305 7
  node * nptr = head;
  while(nptr){
    node * del = nptr;
    nptr = nptr->next;
    TCtype::deleteTy(*del->ty);
    node::dispose(del);
  }
d308 1
a308 1
int TCtypeList::freelistLength()
d310 1
a310 24
  int i = 0;
  for(node * np = node::freelist; np; np = np->next)
    i++;
  return i;
}

void TCtypeList::debug_dump(FILE * os)
{
  for(node * n = head; n; n = n->next){
    if(n != head) fprintf(os, ",");
    n->ty->debug_dump(os);
  }
}

void TCtypeList::write_string_rep(FILE * os)
{
  for(node * n = head; n; n = n->next)
    n->ty->write_string_rep(os);
}

TCtypeList& TCtypeList::stringToTyList(char * str, char ** nptr)
{
  node * list = 0;
  node ** tail = &list;
d318 1
a318 1
      return * new TCtypeList(list);
d320 1
a320 2
    *tail = node::acquire(*ty);
    tail = &(*tail)->next;
d324 1
a324 1
  return * new TCtypeList(list);
d327 1
a327 1
TCtype * TCtypeList::tail()
d329 4
a332 14
  if(head){
    node * n = head;
    while(n->next)
      n = n->next;
    return n->ty;
  } else return 0;
}

bool TCtypeList::equals(TCtypeList& list)
{
  node * tn = head;
  node * ln = list.head;
  while(tn && ln){
    if(!tn->ty->equals(*ln->ty))
d334 1
a334 4
    tn = tn->next;
    ln = ln->next;
  }
  return (!tn && !ln);
d337 1
a337 1
bool TCtypeList::equiv(TCtypeList &list)
d339 4
a342 4
  node * tn = head;
  node * ln = list.head;
  while(tn && ln){
    if(!tn->ty->equiv(*ln->ty))
d344 1
a344 4
    tn = tn->next;
    ln = ln->next;
  }
  return (!tn && !ln);
@


1.17
log
@Changed AO::getStaticType() to a virtual function, so that
for SDot it'll return tylist.tail, and for UDot, it'll
return the type.
Entailed adding TCtypeList::tail() function.

Note: UDot version not currently used (because UDots are
normalized by RAN/Interval).
@
text
@d218 1
a218 1
void TCtype::deleteTy(TCtype * ty)
d220 1
a220 1
  if(ty->cleanup()) delete ty;
d322 1
a322 1
    TCtype::deleteTy(del->ty);
@


1.16
log
@Changed flag_verbose to be an integer indicating verbose
level: 1 (default) only lists current analysis phase;
2 gives progress dots; 3 supplies other "normal" verbose
information; 4 is for debug stuff.
@
text
@d370 10
@


1.15
log
@Reorganized global flags, stat-collection and output;
moved TCcollectStats to diag.cpp/h, renamed to TCstats,
and absorbed what used to be in diag.cpp/h.
Global flags have been moved to flags.h, (they're defined
in tca.cpp, for now).
Removed the -stat flag: the "stat" output is now always
dumped, to the output file rather than stderr.
Added -mbu# flag, though haven't done anything with the
different mbu levels yet.
@
text
@d553 1
a553 1
    if(flag_verbose){
@


1.14
log
@Fixed oversight in applyAssignConstraint -- was not propagating down
inclusion edges.
Added STAT debug output, etc.
@
text
@d5 1
d293 1
a293 1
    stat_recy_ty_nodes++;
d300 1
a300 1
    stat_new_ty_nodes++;
d327 8
d477 1
a477 1
  stat_num_pt_constraints++;
d535 1
a535 1
  stat_num_constraint_solving_visits++;
d557 2
a558 2
      fprintf(stderr, " = %d\n", stat_num_constraint_solving_visits - last_constr_visits);
      last_constr_visits = stat_num_constraint_solving_visits;
@


1.13
log
@Added constraint solving -- not thoroughly tested, though
it appears to work on some sample tests.
@
text
@d389 1
a389 1
TClatType::latKind TClatType::getKind(TCtype& t)
d543 8
@


1.12
log
@Finished (but not tested) initialization of poss-type
constraints.
This entailed creation of a root set (encapsulated by
the class TClatRootSet).
Also, to manipulate the traverseCounter, TCAstate is now
a friend of ECR -- I'm not sure I like this arrangement.
@
text
@d522 24
@


1.11
log
@Intermediate checkin: started writing poss-type constraint
generation: added some needed data structures to ECR and
TClatType; initialized AO constraints and wrote helper
to process inclusion edges from a given ECR;
need to finally process assignments.
@
text
@d468 1
d470 50
@


1.10
log
@Added setting of required-types:
 - file interface now delivers two kinds of assignment edges:
   "true" ('=') and "pseudo" ('-'), the latter for function
   and array object assignments as well as void return assignments.
 - added to AO reqdType member, which is just an enum;
   modified TClatType meet/join functions to work directly on
   enums;
The setting of required types is done:
 1. on file input, for each typed-true-assignment and verify-tag
 2. during arg/ret assignment adding
Finally, AO's debug_dump function has been modified to supply
more diagnostic information; this entailed the renaming of
the virtual portion of the function to dump_descr.
@
text
@d463 8
@


1.9
log
@Revamped TClatType;
renamed ECR::rtType to poss_type;
rewrote TCAstate functions for initializing poss-types;
also left a skeleton function for generating constraints.
Todo: augment TClatType with constraint graph capabilities,
generate contraints, and solve.
Also, AO needs to have required-type.
@
text
@d410 20
d432 1
a432 9
  if(kind != k){
    
    if((kind / 100) == (k / 100)){
      kind = tclZero; //- only possible if both are scalar
    } else if(kind < k){
      kind = k;
    } // else kind already >= k

  } // else kind already == k
d437 1
a437 9
  if(kind != k){
    
    if((kind / 100) == (k / 100)){
      kind = tclBottom; //- only possible if both are scalar
    } else if(kind > k){
      kind = k;
    } // else kind already <= k

  } // else kind already == k
d440 1
a440 1
void TClatType::debug_dump(FILE * os)
d442 1
a442 1
  switch(kind){
d454 1
a454 1
    case tclTop:		fprintf(os, "tclTop"); break;
d456 5
@


1.8
log
@Added skeleton for lvalType(), with initial seeding rules
in tca.cpp, and ECR debug_dump to include rttype.
Must rethink strategy for solving constraints before
proceeding
@
text
@d389 1
a389 1
TClatType& TClatType::validPtrType(TCtype& t)
d391 17
a407 4
  TClatType * ret = new TClatType;
  ret->kind = tcValidPtr;
  ret->ty = &t;
  return *ret;
d410 1
a410 3
//-- meet according to "safe" lattice,
//   where zero is incompatible with valid-pointer.
void TClatType::meet(TClatType& t)
d412 9
a420 41
  //-- check for equality
  if(kind == t.kind){
    switch(kind){
      case tcBottom:
      case tcTop:
        break;
      case tcType:{
          if(!ty->equiv(*t.ty)){ // if not equiv
            if(t.ty->getKind() == TCtype::tcZero){
              // do nothing
            } else if(ty->getKind() == TCtype::tcZero){
              ty = t.ty;
            } else { // set bottom
              setBottom();
            }
          } // else do nothing
        } break;
      case tcValidPtr:{
          //- ideally, set to smallest of ty,t.ty
          //- for now: if not equiv, set to pointer
          if(!ty->equiv(*t.ty)){
            kind = tcType;
            //if(ty) TCtype::deleteTy(ty);
            ty = &TCpointerType::tcVoidPtrType;
          }
        } break;
    }
  } else { //- kind != t.kind
    int k10 = ((int)kind) / 10;
    int tk10 = ((int)t.kind) / 10;
    if(k10 == tk10){ //- set to pointer
      kind = tcType;
      //if(ty) TCtype::deleteTy(ty);
      ty = &TCpointerType::tcVoidPtrType;
      return;
    } else if(tk10 < k10){
      kind = t.kind;
      //if(ty) TCtype::deleteTy(ty);
      ty = t.ty;
    } // else do nothing
  }
d423 1
a423 1
void TClatType::setBottom()
d425 9
a433 3
  kind = tcBottom;
  //if(ty) TCtype::deleteTy(ty);
  ty = 0;
d439 12
a450 16
    case tcBottom:{
        fprintf(os, "tcBottom");
      } break;
    case tcTop:{
        fprintf(os, "tcTop");
      } break;
    case tcType:{
        fprintf(os, "tcType(");
        ty->debug_dump(os);
        fprintf(os, ")");
      } break;
    case tcValidPtr:{
        fprintf(os, "tcValidPtr(");
        ty->debug_dump(os);
        fprintf(os, ")");
      } break;
@


1.7
log
@Added TClatType, added "rttype" member to ECR.
Now: ready to compute runtime-types.
@
text
@d414 1
a414 3
              kind = tcBottom;
              //if(ty) TCtype::deleteTy(ty);
              ty = 0;
d442 7
@


1.6
log
@Changed one line: '!' inst of 'z' to indicate error.
@
text
@d22 2
d191 1
a191 1
    case 'p': return new TCpointerType(0);
d385 81
@


1.5
log
@Added tcZero; modified tcTypeList::node to store type pointer
rather than type reference - something to do with ability
to delete referenced objects!
Added recycling mechanism to recycle typelist nodes
(can be turned off by cmd-line flag).
@
text
@d64 1
a64 1
    default: return 'z'; //-error
@


1.4
log
@Removed DESTRUCTING debug message output.
@
text
@d5 1
d12 1
d26 1
d49 1
d83 1
d123 1
d198 1
a198 1
    case 'v': return new TCtype(tcVoid);
d208 1
d285 28
d319 2
a320 2
    TCtype::deleteTy(&del->ty);
    delete del;
d328 1
a328 1
    n->ty.debug_dump(os);
d335 1
a335 1
    n->ty.write_string_rep(os);
d351 1
a351 1
    *tail = new node(*ty);
d364 1
a364 1
    if(!tn->ty.equals(ln->ty))
d377 1
a377 1
    if(!tn->ty.equiv(ln->ty))
@


1.3
log
@Added mechanism to store AOs in an AOlist in each AO.
Included mechanism for traversing all AOs, and debug output
functions.
Fairly complete, but not thoroughly tested (especially TypeList
destructors?)
@
text
@a279 3
fprintf(stderr, "DESTRUCTING TYPELIST ");
debug_dump(stderr);
fprintf(stderr, "\n");
@


1.2
log
@Added writeTSlevels to output address-taken analysis
type-safety levels to a file.
@
text
@d42 1
a42 1
char TCtype::kindLetter()
d71 78
a148 1
  fprintf(os, "%c ", kindLetter());
d250 1
a250 1
  fprintf(os, "%c ", kindLetter());
d257 1
a257 1
  fprintf(os, "%c ", kindLetter());
d266 1
a266 1
  fprintf(os, "%c ", kindLetter());
d271 1
a271 1
  fprintf(os, "%c %d ", kindLetter(), size);
d280 3
a282 1
fprintf(stderr, "DESTRUCTOR\n");
d325 26
@


1.1
log
@Initial revision
@
text
@d42 22
d69 5
d169 29
d219 6
@
