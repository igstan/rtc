head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2003.11.18.20.13.37;	author suan;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.23.20.29.37;	author suan;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.23.00.07.04;	author suan;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.10.13.59.40;	author suan;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.22.20.17.01;	author suan;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.12.23.47.56;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.01.19.53.00;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.04.20.08.03;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.15.22.35.09;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.07.20.23.26;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.30.16.15.47;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.16.00.54.55;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.15.21.02.44;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.23.23.14.53;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.23.59.18;	author suan;	state Exp;
branches;
next	;


desc
@"no op" version of API functions; can be used for debugging
of instrumentation mechanism.
@


1.15
log
@Modified/updated tcnoop to count and output stats.
@
text
@#include <stdio.h>
#include <stdlib.h>  /* atexit */
#include "tcinternal.h"

/**********************/
/* compile time flags */
/**********************/
int strictPointer = 0;

/****************************************/
/* "private" API data members: useless? */
/****************************************/
/*
FILE * logstream = 0;
FILE * debugstream = 0;
FILE * warnstream = 0;
FILE * errorstream = 0;
*/

/*********************************************************/
/* "private" API functions: needed by tcmalloc, tcstring */
/*********************************************************/
void _printTagPos(FILE * f, _mirror_pos_t tagpos, size_t size)
{ }

int verifyAlloc(const void * addr, size_t size)
{ return 1; }

void overflowTagPos(_mirror_pos_t * tagpos, int offset)
{ }

_mirror_pos_t _getTagPos(const void * addr)
{
  static _mirror_pos_t dummy;
  return dummy;
}

/********************/
/* API data members */
/********************/
char _ini_static_rep[64];
int _int_static_rep[2];
char _char_static_rep[2];
short _short_static_rep[2];
long _long_static_rep[2];
long long _longlong_static_rep[2];
float _float_static_rep[2];
double _double_static_rep[2];
#ifdef LONGDOUBLE /* { */
long double _longdouble_static_rep[2];
#endif /* } LONGDOUBLE */
void * _pointer_static_rep[2];

_addr_and_size_t * _globalArgAddrs = 0;
int _globalArgCount = 0;
void * _globalCallTarget = 0;
void * _dummyAddr = 0;
char * _globalErrlocFile = "<none>";
int _globalErrlocLine = 0, _globalErrlocCol = 0;

/* for bitfields */
long long _dummyInt;

/************/
/* Counters */
/************/

static unsigned long count_all_calls = 0;
static unsigned long count_all_calls_overflow = 0;
static unsigned long count_all_bytes = 0;
static unsigned long count_all_bytes_overflow = 0;
#define COUNT_CALLS(nbytes) do { \
		if(!++count_all_calls) ++count_all_calls_overflow; \
		if(!++count_all_bytes) ++count_all_bytes_overflow; \
		count_all_bytes += nbytes - 1; \
	} while(0)

/****************************/
/* API function definitions */
/****************************/

void _registerExtern_nosize(const char * fname, int line, int col,
		void * addr, _ctype_t type /* , size_t size_aggr */)
{ }

void _verifyPtr(const char * fname, int line, int col, const char * exp,
		const void * addr, size_t size)
{
  COUNT_CALLS(size);
}

void _verifyTag(const char * fname, int line, int col, const char * exp,
		const void * addr, _ctype_t reftype)
{
  COUNT_CALLS(1);
}

void _setByteTags(const char * fname, int line, int col,
		const void * addr, size_t size, int set_tag, int clear_tag)
{
  COUNT_CALLS(size);
}

void _copyTag(const char * fname, int line, int col,
		const void * dst, const void * src, size_t size, _ctype_t type)
{
  COUNT_CALLS(size);
}

void _extern_registerVar(const char * fname, int line, int col,
		const char * varname, void * addr, size_t size)
{ }

void _extern_setUninitTag(const char * fname, int line, int col,
		void * addr, size_t size)
{ }

void _extern_setScalarTag(const char * fname, int line, int col,
		const void * addr, _ctype_t type)
{ }

void _extern_replicateTag(const char * fname, int line, int col,
		void * addr, size_t size, int nelem)
{ }

void _registerVar(const char * fname, int line, int col,
		const char * varname, void * addr, size_t size)
{ }

void _setScalarUninitTag(const char * fname, int line, int col,
		void * addr, _ctype_t type)
{
  COUNT_CALLS(1);
}

void _setScalarTagPtrToInt(const char * fname, int line, int col,
		const void * addr, _ctype_t type)
{
  COUNT_CALLS(1);
}

void _setScalarTag(const char * fname, int line, int col,
		const void * addr, _ctype_t type)
{
  COUNT_CALLS(1);
}

void _replicateTag(const char * fname, int line, int col,
		void * addr, size_t size, int nelem)
{
  COUNT_CALLS(size*nelem);
}

void _promoteTag(const char * fname, int line, int col,
		const void ** addrptr, _ctype_t opnd_type, _ctype_t expr_type,
		void * tmpspace)
{
  COUNT_CALLS(1);
}

void _tcdebug_processCall_func(const char * fnname)
{ }

void _processReturn(const char * fname, int line, int col,
                void * scaf_start, void * scaf_end, void * agrf_start, void * agrf_end,
                _addr_and_size_t ** aargaddrs, const void * addr, size_t size)
{
  COUNT_CALLS(size);
}

void _processArgTag(const char * fname, int line, int col,
		_addr_and_size_t * argaddrs,
		/*int argCount,*/ int index,
		void * addr, _ctype_t type, size_t size_aggr)
{
  COUNT_CALLS((size_aggr)?size_aggr:1);
}

/*****************************************/
/* report static instrumentation numbers */
/*****************************************/
struct static_count_node {
  const char * descr;
  unsigned long count;
  struct static_count_node * next;
} * static_count_head = 0;

void _reportStaticCounts(const char * fname, const char * descr, int count)
{
  struct static_count_node ** np;
  for(np = &static_count_head; *np; np = &(*np)->next){
    if(!strcmp(descr, (*np)->descr)){
      (*np)->count += count;
      break;
    }
  }
  if(!*np){
    *np = (struct static_count_node *) malloc(sizeof(struct static_count_node));
    (*np)-> descr = descr;
    (*np)->count = count;
    (*np)->next = 0;
  }
}

static FILE * statstream = 0;

/**********************************/
/* cleanup function, output stats */
/**********************************/
static void cleanup()
{
  if(statstream){
    struct static_count_node * np;
    for(np = static_count_head; np; np = np->next)
      fprintf(statstream, "Static %s = %lu\n", np->descr, np->count);

    fprintf(statstream, "Dynamic inst-calls: %lu + %lu * (%lu+1)\n",
                        count_all_calls,
                        count_all_calls_overflow,
                        (unsigned long)-1);
    fprintf(statstream, "Dynamic inst-call bytes: %lu + %lu * (%lu+1)\n",
                        count_all_bytes,
                        count_all_bytes_overflow,
                        (unsigned long)-1);
  }
}

/************************/
/* "real" main function */
/************************/

int main(int argc, char * argv[], char * envp[])
{
  extern void callInitFunctions(void);
  extern int _prog_main(int argc, char * argv[], char * envp[]);
  char * argv_array_end;
  int i;

  atexit(cleanup);

  /* this points to the terminating null in the argv array */
  argv_array_end = argv[argc-1] + strlen(argv[argc-1]);

  /* intercept TC command-line arguments */
  for(i = 0; i < argc; ++i){
    if(!strncmp(argv[i],"-tc-",4)){
      if(!strncmp(argv[i]+4,"stream-stat=",12)){
        const char * fname = argv[i]+16;
        if(!strcmp(fname,"")){
          statstream = 0;
          fprintf(stderr, "TC: Disabling statstream\n");
        } else if(!strcmp(fname,"-")){
          statstream = stdout;
          fprintf(stderr, "TC: Setting statstream to stdout\n");
        } else if(!strcmp(fname,"=")){
          statstream = stderr;
          fprintf(stderr, "TC: Setting statstream to stderr\n");
        } else {
          if((statstream = fopen(fname, "w")))
            fprintf(stderr, "TC: Redirecting statstream to file %s\n", fname);
          else
            fprintf(stderr, "TC: Error opening file %s for statstream output\n", fname);
        }
      } else fprintf(stderr, "TC: Unrecognized -tc- flag ignored (%s)\n", argv[i]);

      /* adjust remaining args */
      {
        int argvilen = strlen(argv[i])+1;

        /* 0. decrement array_end marker by argvilen, argc by one */
        argv_array_end -= argvilen;
        argc--;

        /* 1. copy argv bytes forward by argvilen */
        { char * c;
          for(c = argv[i]; c <= argv_array_end; ++c)
            c[0] = c[argvilen];
        }

        /* 2. subtract argvs by argvilen */
        { int j;
          for(j = i; j < argc; ++j) argv[j] = argv[j+1] - argvilen;
          argv[argc] = 0;
        }
        i--; /* decrement to process next item */
      }
    }
  }

  callInitFunctions();

  return _prog_main(argc, argv, envp);
}

@


1.14
log
@Added handling of envp argument (third argument to main).
@
text
@d2 1
d10 4
a13 3
/******************************/
/* "private" API data members */
/******************************/
d18 1
d64 14
d88 3
a90 1
{ }
d94 3
a96 1
{ }
d98 5
a102 3
void _setUninitTag(const char * fname, int line, int col,
		void * addr, size_t size)
{ }
d106 3
a108 5
{ }

void _setStringTag(const char * fname, int line, int col,
		const char * addr, size_t str_len)
{ }
d132 3
a134 1
{ }
d138 3
a140 1
{ }
d144 3
a146 1
{ }
d150 3
a152 1
{ }
d155 1
a155 1
		void ** tagposptr, _ctype_t optype, _ctype_t exptype,
d157 3
a159 1
{ }
d167 3
a169 1
{ }
d175 12
a186 1
{ }
d189 38
a226 1
{ }
d234 1
d236 56
@


1.13
log
@renamed reportNumCalls to reportStaticCounts, taking an extra
parameter describing the count.
currently, only tcptr.c collects the count correctly.
@
text
@d151 1
a151 1
int main(int argc, char * argv[])
d153 2
a154 2
  extern int _prog_main(int argc, char * argv[]);
  return _prog_main(argc, argv);
@


1.12
log
@Renamed registerExtern to registerExtern_nosize
@
text
@d144 1
a144 1
void _reportNumCalls(const char * fname, int num_calls)
@


1.11
log
@Added reportNumCalls
@
text
@d65 1
a65 1
void _registerExtern(const char * fname, int line, int col,
@


1.10
log
@Added ini_static_rep
@
text
@d144 3
@


1.9
log
@Changed registerExtern prototype.
@
text
@d38 1
@


1.8
log
@Added _tcdebug_processCall_func and fixed _processReturn signature
to allow compilation (w/latest API).
@
text
@d65 1
a65 1
		void * addr, _ctype_t type, size_t size_aggr)
@


1.7
log
@Added long long _dummyInt, for use by bitfield handling code;
Changed setScalarTag prototype to take const void * instead of void *;
@
text
@d129 3
d133 2
a134 2
		void * f1_ptr, size_t f1_siz, void * fn_ptr, size_t fn_siz,
		_addr_and_size_t * argaddrs, const void * tagpos, size_t size)
@


1.6
log
@removed _setUnallocTag function prototype (obsolete).
@
text
@d57 2
d81 1
a81 1
		const void * dst, const void * src, size_t size)
d97 1
a97 1
		void * addr, _ctype_t type)
d113 1
a113 1
		void * addr, _ctype_t type)
d117 1
a117 1
		void * addr, _ctype_t type)
@


1.5
log
@Eliminated markStackStart call; replaced with a more complicated
processReturn call that takes in four arguments (_f1_ptr, _f1_siz,
_fn_ptr, _fn_siz) instead of just sf_start.
@
text
@a22 4
void _setUnallocTag(const char * fname, int line, int col,
                                void * addr, size_t size)
{ }

@


1.4
log
@Upgraded to match current (new) API.
@
text
@a130 4
void _markStackStart(const char * fname, int line, int col,
			void ** sf_start, void * formal0, void * formaln)
{ }

d132 2
a133 2
			void * sf_start, _addr_and_size_t * argaddrs,
                        const void * tagpos, size_t size)
@


1.3
log
@Streamlined include files (includes only tcinternal.h)
@
text
@d17 3
a19 3
/***************************/
/* "private" API functions */
/***************************/
d27 1
a27 1
int verifyAlloc(_mirror_pos_t tagpos, size_t size)
d33 6
d42 11
a52 9
_mirror_pos_t _int_staticpos;
_mirror_pos_t _char_staticpos;
_mirror_pos_t _short_staticpos;
_mirror_pos_t _long_staticpos;
_mirror_pos_t _longlong_staticpos;
_mirror_pos_t _float_staticpos;
_mirror_pos_t _double_staticpos;
_mirror_pos_t _longdouble_staticpos;
_mirror_pos_t _pointer_staticpos;
d54 1
a54 1
_pos_and_size_t * _globalArgTags = 0;
d57 1
a57 1
_mirror_pos_t _dummyTagPos;
a69 7
_mirror_pos_t _getTagPos(const void * addr)
{ return _dummyTagPos; }

/* increment tagpos by offset */
void _inxTagPos(_mirror_pos_t * tagposptr, size_t offset)
{ }

d75 1
a75 1
		_mirror_pos_t tagpos, _ctype_t reftype)
d79 1
a79 1
		_mirror_pos_t tagpos, size_t size)
d83 1
a83 1
		_mirror_pos_t dst, _mirror_pos_t src, size_t size)
d87 1
a87 1
		void * addr, int str_len)
d95 1
a95 1
		_mirror_pos_t tagpos, size_t size)
d99 1
a99 1
		const void * addr, _ctype_t type)
d111 1
a111 1
		const void * addr, _ctype_t type)
d115 1
a115 1
		const void * addr, _ctype_t type)
d119 1
a119 1
		const void * addr, _ctype_t type)
d127 1
a127 1
		_mirror_pos_t * tagposptr, _ctype_t optype, _ctype_t exptype,
d136 2
a137 2
			void * sf_start, _pos_and_size_t * argtags,
                        _mirror_pos_t tagpos, size_t size)
d141 1
a141 1
		_pos_and_size_t * argtags,
@


1.2
log
@Added definitions of strictPointer, _setScalarUninitTag(),
_setScalarTagPtrToInt().
@
text
@a1 1
#include <tcapi.h>
@


1.1
log
@Initial revision
@
text
@d5 5
d108 8
@
