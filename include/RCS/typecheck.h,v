head	1.33;
access;
symbols;
locks; strict;
comment	@ * @;


1.33
date	2004.07.03.23.28.42;	author suan;	state Exp;
branches;
next	1.32;

1.32
date	2004.06.29.20.00.08;	author suan;	state Exp;
branches;
next	1.31;

1.31
date	2004.06.24.19.26.16;	author suan;	state Exp;
branches;
next	1.30;

1.30
date	2004.06.24.18.08.17;	author suan;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.08.21.26.28;	author suan;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.05.21.13.56;	author suan;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.10.15.40.15;	author suan;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.08.18.17.09;	author suan;	state Exp;
branches;
next	1.25;

1.25
date	2003.04.23.16.37.51;	author suan;	state Exp;
branches;
next	1.24;

1.24
date	2003.04.03.20.04.36;	author suan;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.02.20.23.49;	author suan;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.11.21.49.34;	author suan;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.05.18.32.18;	author suan;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.05.16.54.57;	author suan;	state Exp;
branches;
next	1.19;

1.19
date	2002.10.31.16.32.02;	author suan;	state Exp;
branches;
next	1.18;

1.18
date	2002.10.10.18.05.13;	author suan;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.05.15.07.54;	author suan;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.22.15.53.41;	author suan;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.26.23.17.19;	author suan;	state Exp;
branches;
next	1.14;

1.14
date	2002.02.26.19.41.38;	author suan;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.12.21.39.32;	author suan;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.04.03.26.13;	author suan;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.13.23.51.02;	author suan;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.13.20.07.33;	author suan;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.15.22.35.55;	author suan;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.12.23.57.00;	author suan;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.07.20.26.20;	author suan;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.21.16.24.14;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.03.19.00.40;	author alexey;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.16.22.01.51;	author suan;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.17.23.38.07;	author suan;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.09.20.14.12;	author suan;	state Exp;
branches;
next	1.1;

1.1
date	99.12.23.23.50.53;	author suan;	state Exp;
branches;
next	;


desc
@This is the header file that should be included by files being
instrumented; includes tcapi, tc-libraries, and library function
redefinitions.
(Used to be part of dynamic.h.)
@


1.33
log
@Cheat: in vuln mode, disable checking of bzero.
Justification: overwriting a sensitive location with
0 is not a vulnerability.
@
text
@/* - This file describes function renamings,
 *   for main, and for library functions that
 *   have typecheck versions written.
 * - This file is to be included by each to-be-
 *   instrumented file BEFORE being instrumented.
 * - This file is NOT to be included by any
 *   runtime code.
 */

#ifndef _TYPECHECK_H
#define _TYPECHECK_H

/***************************************/
/************ typecheck API ************/
/***************************************/
#ifdef TC_VERIFYPTR_CHECK /* { */
#include <tcptr.h>
#else /* } ifndef TC_VERIFYPTR_CHECK { */
#include <tcapi.h>
#endif /* } !define TC_VERIFYPTR_CHECK */

/**********************************************/
/************ Rename main function ************/
/**********************************************/
#ifdef TC_PREINSTR /* { */
#define main _prog_main 
#endif /* } TC_PREINSTR */

/********************/
/***** stdio.h *****/
/********************/
#ifdef TC_PREINSTR /* { */
#ifdef TC_STDIO
#define fgets _typecheck_fgets 
#define gets _typecheck_gets 
#define fread _typecheck_fread 
#endif /* TC_STDIO */

#ifdef TC_SCANF
#define scanf _typecheck_scanf 
#define fscanf _typecheck_fscanf 
#define sscanf _typecheck_sscanf 
#endif /* TC_SCANF */

#ifdef TC_PRINTF
#define sprintf _typecheck_sprintf 
#define snprintf _typecheck_snprintf 
#endif /* TC_PRINTF */

#ifdef TC_PCTN_PRINTF
extern int printf();
extern int fprintf();

#define printf _typecheck_pctn_printf 
#define fprintf _typecheck_pctn_fprintf 
#endif /* TC_PCTN_PRINTF */

#endif /* } TC_PREINSTR */

/********************/
/***** malloc.h *****/
/********************/
#ifdef TC_PREINSTR /* { */
#ifdef TC_MALLOC
/* uninstrumented versions! */
void *malloc(size_t size);
void *calloc(size_t nelem, size_t elsize);
void free(void *ptr);
void *memalign(size_t alignment, size_t size);
void *realloc(void *ptr, size_t size);
void *valloc(size_t size);

#define malloc _typecheck_malloc 
#define calloc _typecheck_calloc 
#define free _typecheck_free 
#define memalign _typecheck_memalign 
#define realloc _typecheck_realloc 
#define valloc _typecheck_valloc 
#endif /* TC_MALLOC */
#endif /* } TC_PREINSTR */

/*******************/
/***** ctype.h *****/
/*******************/
/* this works only on Linux; no portable anti-macro mechanism? */
#define __NO_CTYPE

/********************/
/***** string.h *****/
/********************/
#ifdef TC_PREINSTR /* { */
#ifdef TC_STRING
/* note: the following (bcopy) is a hack to map bcopy to memcpy.
         In practice, bcopy should occur in two places:
         1) a function prototype, in which case the '*' makes
            the signature match that of memcpy;
         2) a function call in a void context, in which case
            the '*' will at most generate a "void value not
            ignored" warning (right?).
*/
#define bcopy(s,d,z) *_typecheck_memcpy(d,s,z)

#if defined(TC_INLINE_BZERO) /* { */
#define _tc_bzero(s,n) do { size_t i, nn = (n); for(i = 0; i < nn; ++i) ((char *)(s))[i] = 0; } while(0)
#else /* } !defined(TC_INLINE_BZERO) { */
#define _tc_bzero _typecheck_bzero
#endif /* } !defined(TC_INLINE_BZERO) */

#define bzero _typecheck_bzero
#define memcpy _typecheck_memcpy
#define memmove _typecheck_memmove
#define strcpy _typecheck_strcpy
#define strncpy _typecheck_strncpy
#define strcat _typecheck_strcat
#define strncat _typecheck_strncat
#define strxfrm _typecheck_strxfrm
#define memset _typecheck_memset
/* #define strerror _typecheck_strerror */
#define memccpy _typecheck_memccpy
/* #define strsignal _typecheck_strsignal */
#define strdup _typecheck_strdup
#endif /* TC_STRING */
#endif /* } TC_PREINSTR */

/*******************/
/***** wchar.h *****/
/*******************/
#ifdef TC_PREINSTR /* { */
/*
#define wcscpy  _typecheck_wcscpy 
#define wcpcpy  _typecheck_wcpcpy 
#define wcscat  _typecheck_wcscat 
#define wcsdup  _typecheck_wcsdup 
#define wmemcpy _typecheck_wmemcpy 
*/
#endif /* } TC_PREINSTR */

/****************************/
/***** misc library fns *****/
/****************************/
#ifdef TC_PREINSTR /* { */
/*#ifdef TC_LIBC*/
#define nl_langinfo _typecheck_nl_langinfo 
#define stat _typecheck_stat 
#define lstat _typecheck_lstat 
#define fstat _typecheck_fstat 
#define ctime _typecheck_ctime
#define localtime _typecheck_localtime
#define gmtime _typecheck_gmtime
#define asctime _typecheck_asctime
#define getpass _typecheck_getpass
/*
#define brk _typecheck_brk
#define sbrk _typecheck_sbrk
*/
#define read _typecheck_read
#define pread _typecheck_pread
/*
#define readv _typecheck_readv
*/
#define gethostbyname _typecheck_gethostbyname
#define gethostbyaddr _typecheck_gethostbyaddr
/*#endif*/ /* TC_LIBC */
#endif /* } TC_PREINSTR */

/********************************/
/* undo library instrumentation */
/********************************/

#if !defined(TC_PREINSTR) /* { */

#if defined(TC_NO_HEAPTAG) /* { */
#define _typecheck_malloc	malloc
#define _typecheck_calloc	calloc
#define _typecheck_free		free
#define _typecheck_memalign	memalign
#define _typecheck_realloc	realloc
#define _typecheck_valloc	valloc
#endif /* } defined(TC_NO_HEAPTAG) */

/* Time to cheat: in vuln mode, we will allow a	*/
/* sensitive location to be overwritten with 0	*/
#if defined(TC_NO_LIB) || defined(TC_VULNERABLE_VP) /* { */
#define _typecheck_bzero	bzero
#endif /* } defined(TC_NO_LIB) || defined(TC_VULNERABLE_VP) */

#if defined(TC_NO_LIB) /* { */

#define _typecheck_fgets	fgets
#define _typecheck_gets		gets
#define _typecheck_fread	fread
#define _typecheck_scanf	scanf
#define _typecheck_fscanf	fscanf
#define _typecheck_sscanf	sscanf
#define _typecheck_sprintf	sprintf
#define _typecheck_snprintf	snprintf
#define _typecheck_memcpy	memcpy
#define _typecheck_memmove	memmove
#define _typecheck_strcpy	strcpy
#define _typecheck_strncpy	strncpy
#define _typecheck_strcat	strcat
#define _typecheck_strncat	strncat
#define _typecheck_strxfrm	strxfrm
#define _typecheck_memset	memset
#define _typecheck_strerror	strerror
#define _typecheck_memccpy	memccpy
#define _typecheck_strsignal	strsignal
#define _typecheck_strdup	strdup
#define _typecheck_wcscpy	wcscpy 
#define _typecheck_wcpcpy	wcpcpy 
#define _typecheck_wcscat	wcscat 
#define _typecheck_wcsdup	wcsdup 
#define _typecheck_wmemcpy	wmemcpy
#define _typecheck_nl_langinfo	nl_langinfo
#define _typecheck_stat		stat
#define _typecheck_lstat	lstat
#define _typecheck_fstat	fstat
#define _typecheck_ctime	ctime
#define _typecheck_localtime	localtime
#define _typecheck_gmtime	gmtime
#define _typecheck_asctime	asctime
#define _typecheck_getpass	getpass
#define _typecheck_brk		brk
#define _typecheck_sbrk		sbrk
#define _typecheck_read		read
#define _typecheck_pread	pread
#define _typecheck_readv	readv
#define _typecheck_gethostbyname	gethostbyname
#define _typecheck_gethostbyaddr	gethostbyaddr

#else /* } !defined(TC_NO_LIB) { */

/* declare de-_typecheck_-ed prototypes */
/* see analysis/tca.cpp: TCAstate::interestingLibFnSignatures() */
extern char * fgets();
extern char * gets();
extern size_t fread();
extern int scanf();
extern int fscanf();
extern int sscanf();
extern int sprintf();
extern int snprintf();
extern void bzero();
extern void * memcpy();
extern void * memmove();
extern char * strcpy();
extern char * strncpy();
extern char * strcat();
extern char * strncat();
/* extern size_t strxfrm();	*/
extern void * memset();
/* extern char * strerror();	*/
extern void * memccpy();
/* extern char * strsignal();	*/
/* extern char * strdup();	*/
/* wcscpy  */
/* wcpcpy  */
/* wcscat  */
/* wcsdup  */
/* wmemcpy */
/* extern char * nl_langinfo();	*/
/* extern int stat();		*/
/* extern int lstat();		*/
/* extern int fstat();		*/
/* extern char * ctime();	*/
/* extern struct tm * localtime();	*/
/* extern struct tm * gmtime();	*/
/* extern char * asctime();	*/
/* extern char * getpass();	*/
/* extern int brk();		*/
/* extern void * sbrk();	*/
/* extern ssize_t read();	*/
/* extern ssize_t pread();	*/
/* extern ssize_t readv();	*/
/* extern struct hostent * gethostbyname();	*/
/* extern struct hostent * gethostbyaddr();	*/

#endif /* } !defined(TC_NO_LIB) */

#endif /* } !defined(TC_PREINSTR) */

/*************************************************/

/**************************************/
/* GNU Hacks for stdarg, gnu keywords */
/**************************************/
#ifdef TC_PREINSTR /* { */
#include "gnu-hacks.h"
#endif /* } TC_PREINSTR */

/* Used as the marker for AST instrumentation to
   disregard the contents of typecheck.h. */
#ifdef TC_PREINSTR /* { */
int _tc_h_end;
#endif /* } TC_PREINSTR */

#endif	/* _TYPECHECK_H */
@


1.32
log
@In post-instr mode, added external declarations
for de-_typecheck_ed libfns -- needed in vuln mode
when de-instrumenting library functions with tracked
targets.
@
text
@d181 6
a196 1
#define _typecheck_bzero	bzero
@


1.31
log
@Undid the moving of extern decls of printf/fprintf to
after _tc_h_end -- caused gcc to complain of mismatched
prototypes!
@
text
@d182 1
d225 49
a273 1
#endif /* } defined(TC_NO_LIB) */
@


1.30
log
@With pctn on, moved extern decl of printf/fprintf
to _AFTER_ _tc_h_end, so that sml will process it.
(Otherwise, printf/fprintf call not recognized as
"direct calls" by rtca).
@
text
@d51 3
a240 7

/* put this after _tc_h_end to force "tc -assign" to process their declaration */
#ifdef TC_PCTN_PRINTF
extern int printf();
extern int fprintf();
#endif /* TC_PCTN_PRINTF */

@


1.29
log
@Removed TC_NO_BZERO;
added TC_INLINE_BZERO flag, which when enabled translates
_tc_bzero calls to a simple inlined loop.
(Note that to support this, calls to bzero must be manually
changed to _tc_bzero; furthermore, to allow regular EXE
compilation, the following should be added to the top of
any files so changed:
#ifndef _tc_bzero
#define _tc_bzero bzero
#endif
@
text
@a50 2
extern int printf();
extern int fprintf();
d53 1
a53 1
#endif /* TC_PRINTF */
d238 7
a245 1

@


1.28
log
@New handling of [f]printf with the pctn mechanism...

The big picture in printf handling:
For -ptrw (which turns on -DTC_PCTN_PRINTF), we translate printf
and fprintf to _typecheck_pctn_printf and _typecheck_pctn_fprintf;
then, during instrumentation, we preprocess the constructed ast
to examine the format string argument of each pctn_[f]printf call:
if it is a string literal that does not contain a "%n", we'll convert
it back to a plain [f]printf, thus eliding the %d-instrumentation,
and furthermore (for -ptrw -range, at least), allows static analysis
to eliminate more tracked locations.
@
text
@d102 6
a107 1
#if !defined(TC_NO_BZERO) /* { */
a108 2
#endif /* } !defined TC_NO_BZERO */

@


1.27
log
@Added printf/fprintf wrapper aliases.
@
text
@a45 2
#define printf _typecheck_printf 
#define fprintf _typecheck_fprintf 
d49 8
@


1.26
log
@Added TC_NO_BZERO flag
@
text
@d43 5
d50 1
a50 1
#endif /* TC_SCANF */
@


1.25
log
@Extracted GNU hacks into gnu-hacks.h
@
text
@d91 1
d93 2
@


1.24
log
@Added fscanf, sscanf.
@
text
@d212 3
a214 8
/********************/
/***** stdarg.h *****/
/********************/
/*
 * tc -va_arg will convert va_arg to TCvarg
 * here, we convert TCvarg back to va_arg, but
 * also pre-insert a dummy indicator.
 */
d216 1
a216 41
extern int _tc_varg_dummy;
#define TCvarg(x,y) (_tc_varg_dummy,va_arg(x,y))
#endif /* } !TC_PREINSTR */

/*
 * New annoyance: redhat GCC includes a reference
 * to __builtin_va_list, so here's a hack to try
 * to get rid of it 
 */
#ifdef TC_PREINSTR /* { */
typedef void * __builtin_va_list;
extern int _tc_builtin_varg_dummy;
#define __builtin_va_arg(x,t) __builtin_va_arg(x,(t)_tc_builtin_varg_dummy)
#endif /* } !TC_PREINSTR */

/*************************/
/* DISABLE GNUC KEYWORDS */
/*************************/
#ifdef TC_PREINSTR /* { */
#ifdef __GNUC__ /* { */

#undef __GNUC__
#define __GNUC__ 1

/*
#define __attribute__(x)
*/
#define __extension__
#define __inline
#define __restrict

#define __THROW

#define __P(args)     args
#define __PMT(args)   args
#define __const       const
#define __signed      signed
#define __volatile    volatile
#define __DOTS        , ...

#endif /* } __GNUC__ */
a217 1

@


1.23
log
@Added _typecheck_read and _typecheck_pread
@
text
@d41 2
d168 2
@


1.22
log
@Added support for eliminating tcptr checks via ifdefs of
TC_NO_INST, TC_NO_VP, TC_NO_STACKTAG, TC_NO_HEAPTAG, TC_NO_LIB
@
text
@d135 1
d138 1
@


1.21
log
@Changed gnuc_va_list fix -- *NOW* it works.
@
text
@d25 1
a25 1
#ifdef TC_PREINSTR
d27 1
a27 1
#endif /* TC_PREINSTR */
d32 1
a32 1
#ifdef TC_PREINSTR
d44 1
a44 1
#endif /* TC_PREINSTR */
d49 1
a49 1
#ifdef TC_PREINSTR
d66 1
a66 1
#endif /* TC_PREINSTR */
d77 1
a77 1
#ifdef TC_PREINSTR
d103 1
a103 1
#endif /* TC_PREINSTR */
d108 1
a108 1
#ifdef TC_PREINSTR
d116 1
a116 1
#endif /* TC_PREINSTR */
d121 1
a121 1
#ifdef TC_PREINSTR
d142 59
a200 1
#endif /* TC_PREINSTR */
d202 3
d214 1
a214 1
#ifdef TC_PREINSTR /*{*/
d224 1
a224 1
#ifdef TC_PREINSTR /*{*/
d233 2
a234 2
#ifdef TC_PREINSTR /*{*/
#ifdef __GNUC__ /*{*/
d261 1
a261 1
#ifdef TC_PREINSTR
d263 1
a263 1
#endif /* TC_PREINSTR */
@


1.20
log
@Changed __gnuc_va_list hack from a #define to a typedef.
This way, during postproc, gcc can assign the appropriate
type to __gnuc_va_list (whereas, before, it would've been
fixed as a void *, which no longer works with gcc 3.2.1).
NOTE: va_list will be TC-initialized with pointer-type,
which I suppose is as good as any?
@
text
@d164 1
a164 2
#define __GNUC_VA_LIST
typedef void * __gnuc_va_list;
@


1.19
log
@Added prototypes to uninstrumented versions of
malloc/free functions.
@
text
@d165 1
a165 1
#define __gnuc_va_list void *
@


1.18
log
@Added switch to include tcptr.h ifdef TC_VERIFYPTR_CHECK
@
text
@d51 8
@


1.17
log
@Added _typecheck_sprintf and _typecheck_snprintf
@
text
@d16 3
d20 1
@


1.16
log
@#define __NO_CTYPE hack for Linux gcc to bypass ctype macros.
@
text
@d37 2
@


1.15
log
@Added _typecheck_bzero.
@
text
@d54 6
@


1.14
log
@Added scanf (only; later add *scanf).
@
text
@d69 1
@


1.13
log
@(OLD CHANGES:) added wc_ library functions, commented out;
(NEW CHANGES:) added hacks to bypass __gnuc_va_list problem,
and also to rig __builtin_va_arg so that instr-ast can output
the function with a type in its second argument.
@
text
@d34 4
@


1.12
log
@Added #defines for tclibc functions.
@
text
@d80 13
d131 12
@


1.11
log
@Changed bcopy mapping to point back to memcpy - with explanation
of HACK used to make this approach work.
@
text
@d80 26
@


1.10
log
@changed #define bcopy _typecheck_memcpy to _typecheck_bcopy
@
text
@d55 10
a64 1
#define bcopy(s,d,z) _typecheck_bcopy(d,s,z)
@


1.9
log
@Added #define bcopy _typecheck_memcpy
Added stdarg handler which mucks around with va_arg
Added some ad hoc #defines to get gcc to compile without -U__GNUC__
@
text
@d55 1
a55 1
#define bcopy(s,d,z) _typecheck_memcpy(d,s,z)
@


1.8
log
@Added TC_STDIO for stdio functions (fgets, gets, fread).
Removed TC_IOSTDIO and iostdio include.
@
text
@d55 1
d71 43
d119 1
@


1.7
log
@Removed #include <tclibc.h>
@
text
@d26 11
a67 9
#endif /* TC_PREINSTR */

/*****************************************/
/************ stdio functions ************/
/*****************************************/
#ifdef TC_PREINSTR
#ifdef TC_IOSTDIO
#include <iostdio.h>
#endif /* TC_IOSTDIO */
@


1.6
log
@restructured (#ifdef TC_PREINSTR, etc)
@
text
@a17 5
/**************************************************/
/************ libc function prototypes ************/
/**************************************************/
#include <tclibc.h>

@


1.5
log
@Added a marker (int _tc_h_end;) for AST instrumentation to
disregard the contents of typecheck.h.
@
text
@d13 3
a15 1
/* include API */
d18 5
d26 1
d28 1
a28 5

/****************************************/
/************ libc functions ************/
/*****************************************/
#include <tclibc.h>
d33 2
d41 2
d47 2
d61 2
d67 2
a68 1
#ifndef USESTDIO
d70 2
a71 1
#endif
d75 1
d77 1
@


1.4
log
@Removed register #define;
Added #ifndef USESTDIO (to bypass libio, which doesn't have everything).
@
text
@d59 4
@


1.3
log
@Replaced #include <tcmalloc.h> and <tcstring.h> with <tclibc.h>.
@
text
@d55 1
d57 1
a57 8

/***************************************/
/************ miscellaneous ************/
/***************************************/
/* Remove the register keyword, so that addresses
   can be taken by our instrumentation. */
/* PHASE THIS OUT? */
#define register /##* register *##/
@


1.2
log
@Removed typecheck_alloca #define.
@
text
@d21 4
a24 4
/******************************************/
/************ malloc functions ************/
/******************************************/
#include <tcmalloc.h>
d26 3
d36 3
a38 5
/******************************************/
/************ string functions ************/
/******************************************/
#include <tcstring.h>

@


1.1
log
@Initial revision
@
text
@a31 1
#define alloca _typecheck_alloca 
@
