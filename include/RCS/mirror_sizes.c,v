head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2000.06.15.23.12.58;	author alexey;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.15.20.56.21;	author suan;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.15.15.53.30;	author suan;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.14.20.05.03;	author alexey;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.14.19.42.25;	author alexey;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.14.19.24.59;	author alexey;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.14.19.08.46;	author alexey;	state Exp;
branches;
next	;


desc
@First complete version.
@


1.7
log
@Fixed a bug that screwed up the first byte of a tag (size and type).
@
text
@/* automatically generates mirror_sizes.h 
   see ckit/src/c-util/sizes.c for more stuff */

#include <stdio.h>

typedef long long longlong;
typedef long double longdouble;
typedef char* pointer;

/* Should we do this with a typedef instead?
   What do we do with the last case?
   How about temps? */
#define MIRROR_TYPE(ty) (					\
	   (sizeof(char) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tchar\n")		\
	|| (sizeof(short) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tshort\n")	\
	|| (sizeof(int) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tint\n")		\
	|| (sizeof(long) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tlong\n")		\
	|| (sizeof(longlong) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tlong long\n")	\
	|| (sizeof(float) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tfloat\n")	\
	|| (sizeof(double) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tdouble\n")	\
	|| (sizeof(longdouble) * 2 == sizeof(ty))		\
	   && printf("#define _MIRROR_" #ty "\tlong double\n")	\
	|| (sizeof(pointer) * 2 == sizeof(ty))			\
	   && printf("#define _MIRROR_" #ty "\tchar *\n")	\
	|| (ty##_mt_found = 0))


/* First computes log of size of the argument type (also saves
   it in the <type>_ls variable).  Taken from function
   initStaticRep() of pmirror_newtags.c. */
#define LOGSIZE(ty)						\
	{							\
	  int i, ls;						\
	  unsigned long unum = (unsigned long) sizeof(ty);	\
	  for(ls = -1; unum; ++ls)				\
	    unum >>= 1;						\
	  if(ls == -1 || (1 << ls != sizeof(ty)))		\
	    fprintf(stderr,					\
		    "Error: incompatible scalar size "		\
		    "(sizeof(" #ty ") = %d)\n", sizeof(ty));	\
	  else							\
	    printf("#define _LOGSIZE_" #ty "\t%d\n",		\
		   ty##_ls = ls);				\
	 }

/* Creates unions containing the byte array of the uninit
   and init tag for each type's size.  These unions provide
   skeletons of the tags for all types, so we can write tags
   in one step by using the _MIRROR_<type> fields.
  union {
    unsigned char uninit_bytes = {0x08|_typetag_uninit|'<type>_ls', 0x88, 0x88,...};
    MIRROR_TYPE uninit_mt;
  } _<type>_uninit_tag_u;

  union {
    unsigned char init_bytes = {0x08|_typetag_<type>|'<type>_ls', 0x88, 0x88,...};
    MIRROR_TYPE init_mt;
  } _<type>_tag_u;
*/				    
#define TAG_UNIONS(ty, tagname)						\
	{								\
	  int i;							\
	  if (ty##_mt_found) {						\
	    printf("static union {\n  unsigned char uninit_bytes[%d];\n", \
		   sizeof(ty)/2);					\
	    printf("  _MIRROR_" #ty " uninit_mt;\n} _" #ty		\
		   "_uninit_tag_u = {{0x%x0|_typetag_uninit",		\
		    8 + ty##_ls);					\
	    for (i = 2; i < sizeof(ty); i += 2)				\
	      printf(", 0x88");						\
	    printf("}};\n");						\
	    printf("static union {\n  unsigned char init_bytes[%d];\n",	\
		   sizeof(ty)/2);					\
	    printf("  _MIRROR_" #ty " init_mt;\n} _" #ty		\
		   "_tag_u = {{0x%x0|" #tagname, 8 + ty##_ls);		\
	    for (i = 2; i < sizeof(ty); i += 2)				\
	      printf(", 0x88");						\
	    printf("}};\n\n");						\
	  }								\
	}

main ()
{
  /* Temporaries to carry logsize information between LOGSIZE
     and TAG_UNIONS. */
  int char_ls, short_ls, int_ls, long_ls, longlong_ls,
      float_ls, double_ls, longdouble_ls, pointer_ls;

  /* Temporaries to tell TAG_UNIONS whether MIRROR_TYPE was successful. */
  int char_mt_found = 1, short_mt_found = 1, int_mt_found = 1,
      long_mt_found = 1, longlong_mt_found = 1, float_mt_found = 1,
      double_mt_found = 1, longdouble_mt_found = 1, pointer_mt_found = 1;

  printf("#ifndef _MIRROR_SIZES_H\n");
  printf("#define _MIRROR_SIZES_H\n");
  printf("/* This file was automatically generated using mirror_sizes.c.\n");
  printf("   It assumes exactly four bit tags. */\n\n");

  /* For each type figure out what type is one half its size. */
  MIRROR_TYPE(char);
  MIRROR_TYPE(short);
  MIRROR_TYPE(int);
  MIRROR_TYPE(long);
  MIRROR_TYPE(longlong);
  MIRROR_TYPE(float);
  MIRROR_TYPE(double);
#ifdef LONGDOUBLE
  MIRROR_TYPE(longdouble);
#endif /* LONGDOUBLE */
  MIRROR_TYPE(pointer);
  printf("\n");

/* Compute logs of sizes of types (also saves them
   in the <type>_ls variables for use by TAG_UNIONS(). */
  LOGSIZE(char);
  LOGSIZE(short);
  LOGSIZE(int);
  LOGSIZE(long);
  LOGSIZE(longlong);
  LOGSIZE(float);
  LOGSIZE(double);
#ifdef LONGDOUBLE
  LOGSIZE(longdouble);
#endif /* LONGDOUBLE */
  LOGSIZE(pointer);
  printf("\n");

  /* Now create unions containing the byte array of the uninit
     and init tags for each type's size. */
  TAG_UNIONS(char, _typetag_int);
  TAG_UNIONS(short, _typetag_int);
  TAG_UNIONS(int, _typetag_int);
  TAG_UNIONS(long, _typetag_int);
  TAG_UNIONS(longlong, _typetag_int);
  TAG_UNIONS(float, _typetag_float);
  TAG_UNIONS(double, _typetag_float);
#ifdef LONGDOUBLE
  TAG_UNIONS(longdouble, _typetag_float);
#endif /* LONGDOUBLE */
  TAG_UNIONS(pointer, _typetag_ptr);

  printf("#endif /* _MIRROR_SIZES_H */\n");
}
@


1.6
log
@Made the unions static;
double-braced their initialization.
@
text
@d74 1
a74 1
		   "_uninit_tag_u = {{0x0%x|_typetag_uninit",		\
d82 1
a82 1
		   "_tag_u = {{0x0%x|" #tagname, 8 + ty##_ls);		\
@


1.5
log
@Redefined TAG_UNIONS to output something the compiler will accept
(added size to char array; moved initialization outside of the
union definitions).
@
text
@d71 1
a71 1
	    printf("union {\n  unsigned char uninit_bytes[%d];\n",	\
d74 1
a74 1
		   "_uninit_tag_u = {0x0%x|_typetag_uninit",		\
d78 2
a79 2
	    printf("};\n");						\
	    printf("union {\n  unsigned char init_bytes[%d];\n",	\
d82 1
a82 1
		   "_tag_u = { 0x0%x|" #tagname, 8 + ty##_ls);		\
d85 1
a85 1
	    printf("};\n\n");						\
@


1.4
log
@Unions are now created only if _MIRROR_<type> is defined.
Added comments and fixed a simple bug.
@
text
@d67 20
a86 17
#define TAG_UNIONS(ty, tagname)					\
	{							\
	  int i;						\
	  if (ty##_mt_found) {					\
	    printf("union {\n  unsigned char uninit_bytes[] = "	\
		   "{0x0%x|_typetag_uninit", 8 + ty##_ls);	\
	    for (i = 2; i < sizeof(ty); i += 2)			\
	      printf(", 0x88");					\
	    printf("};\n  _MIRROR_" #ty " uninit_mt;\n} _" #ty	\
		   "_uninit_tag_u;\n");				\
	    printf("union {\n  unsigned char init_bytes[] = "	\
		   "{0x0%x|" #tagname, 8 + ty##_ls);		\
	    for (i = 2; i < sizeof(ty); i += 2)			\
	      printf(", 0x88");					\
	    printf("};\n  _MIRROR_" #ty " init_mt;\n} _" #ty	\
		   "_tag_u;\n\n");				\
	  }							\
@


1.3
log
@Split TAG_UNIONS into LOGSIZE and TAG_UNIONS for higher
readability of the output.
@
text
@d13 1
a13 1
#define MIRROR_TYPE(ty)						\
d31 2
a32 1
	   && printf("#define _MIRROR_" #ty "\tchar *\n");
d54 3
a56 1
   and init tag for each type's size:
d70 1
a70 1
	  if (ty##_ls > 0) {					\
d75 1
a75 1
	    printf("};\n  MIRROR_TYPE uninit_mt;\n} _" #ty	\
d81 1
a81 1
	    printf("};\n  MIRROR_TYPE init_mt;\n} _" #ty	\
d88 2
d92 5
@


1.2
log
@Fixed a few bugs (e.g. _typetag_short does not exist,
declaring characters instead of character arrays, etc.).
@
text
@d36 15
a50 1
   initStaticRep() of pmirror_newtags.c.
d52 1
a52 1
   Then creates unions containing the byte array of the uninit
d64 1
a64 1
#define TAG_UNIONS(ty, tagname)						\
d66 2
a67 10
	  int i, ls;						\
	  unsigned long unum = (unsigned long) sizeof(ty);	\
	  for(ls = -1; unum; ++ls)				\
	    unum >>= 1;						\
	  if(ls == -1 || (1 << ls != sizeof(ty)))		\
	    fprintf(stderr,					\
		    "Error: incompatible scalar size "		\
		    "(sizeof(" #ty ") = %d)\n", sizeof(ty));	\
	  else {						\
	    printf("#define _LOGSIZE_" #ty "\t%d\n\n", ls);	\
d69 1
a69 1
		   "{0x0%x|_typetag_uninit", 8 + ls);		\
d72 2
a73 2
	    printf("};\n  MIRROR_TYPE uninit_mt;\n}_" #ty	\
		   "_uninit_tag_u;\n\n");			\
d75 1
a75 1
		   "{0x0%x|" #tagname, 8 + ls);			\
d78 2
a79 2
	    printf("};\n  MIRROR_TYPE init_mt;\n}_" #ty		\
		   "_tag_u;\n\n\n");				\
d85 2
a86 2
  int char_ls = -1, short_ls = -1, int_ls = -1, long_ls = -1, longlong_ls = -1,
      float_ls = -1, double_ls = -1, longdouble_ls = -1, pointer_ls = -1;
d105 16
a120 1
  printf("\n\n");
@


1.1
log
@Initial revision
@
text
@d50 1
a50 1
#define TAG_UNIONS(ty)						\
d62 1
a62 1
	    printf("union {\n  unsigned char uninit_bytes = "	\
d68 2
a69 2
	    printf("union {\n  unsigned char init_bytes = "	\
		   "{0x0%x|_typetag_" #ty, 8 + ls);		\
d95 1
d97 1
d103 11
a113 9
  TAG_UNIONS(char);
  TAG_UNIONS(short);
  TAG_UNIONS(int);
  TAG_UNIONS(long);
  TAG_UNIONS(longlong);
  TAG_UNIONS(float);
  TAG_UNIONS(double);
  TAG_UNIONS(longdouble);
  TAG_UNIONS(pointer);
@
